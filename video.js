!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=8)}({8:function(t,e,n){t.exports=n(9)},9:function(t,e,n){"use strict";n.r(e);var r={};function o(t,e,n,r,o){t.clearColor(e,n,r,o),t.clear(t.COLOR_BUFFER_BIT)}n.r(r),n.d(r,"create",(function(){return u})),n.d(r,"clone",(function(){return c})),n.d(r,"copy",(function(){return l})),n.d(r,"fromValues",(function(){return s})),n.d(r,"set",(function(){return d})),n.d(r,"identity",(function(){return f})),n.d(r,"transpose",(function(){return h})),n.d(r,"invert",(function(){return m})),n.d(r,"adjoint",(function(){return M})),n.d(r,"determinant",(function(){return v})),n.d(r,"multiply",(function(){return w})),n.d(r,"translate",(function(){return g})),n.d(r,"scale",(function(){return b})),n.d(r,"rotate",(function(){return x})),n.d(r,"rotateX",(function(){return p})),n.d(r,"rotateY",(function(){return A})),n.d(r,"rotateZ",(function(){return E})),n.d(r,"fromTranslation",(function(){return R})),n.d(r,"fromScaling",(function(){return T})),n.d(r,"fromRotation",(function(){return _})),n.d(r,"fromXRotation",(function(){return y})),n.d(r,"fromYRotation",(function(){return F})),n.d(r,"fromZRotation",(function(){return P})),n.d(r,"fromRotationTranslation",(function(){return C})),n.d(r,"fromQuat2",(function(){return B})),n.d(r,"getTranslation",(function(){return U})),n.d(r,"getScaling",(function(){return L})),n.d(r,"getRotation",(function(){return S})),n.d(r,"fromRotationTranslationScale",(function(){return D})),n.d(r,"fromRotationTranslationScaleOrigin",(function(){return I})),n.d(r,"fromQuat",(function(){return V})),n.d(r,"frustum",(function(){return N})),n.d(r,"perspective",(function(){return Y})),n.d(r,"perspectiveFromFieldOfView",(function(){return O})),n.d(r,"ortho",(function(){return W})),n.d(r,"lookAt",(function(){return j})),n.d(r,"targetTo",(function(){return X})),n.d(r,"str",(function(){return q})),n.d(r,"frob",(function(){return z})),n.d(r,"add",(function(){return H})),n.d(r,"subtract",(function(){return k})),n.d(r,"multiplyScalar",(function(){return G})),n.d(r,"multiplyScalarAndAdd",(function(){return Z})),n.d(r,"exactEquals",(function(){return Q})),n.d(r,"equals",(function(){return $})),n.d(r,"mul",(function(){return K})),n.d(r,"sub",(function(){return J}));var a=1e-6,i="undefined"!=typeof Float32Array?Float32Array:Array;Math.random;Math.PI;function u(){var t=new i(16);return i!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function c(t){var e=new i(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function l(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function s(t,e,n,r,o,a,u,c,l,s,d,f,h,m,M,v){var w=new i(16);return w[0]=t,w[1]=e,w[2]=n,w[3]=r,w[4]=o,w[5]=a,w[6]=u,w[7]=c,w[8]=l,w[9]=s,w[10]=d,w[11]=f,w[12]=h,w[13]=m,w[14]=M,w[15]=v,w}function d(t,e,n,r,o,a,i,u,c,l,s,d,f,h,m,M,v){return t[0]=e,t[1]=n,t[2]=r,t[3]=o,t[4]=a,t[5]=i,t[6]=u,t[7]=c,t[8]=l,t[9]=s,t[10]=d,t[11]=f,t[12]=h,t[13]=m,t[14]=M,t[15]=v,t}function f(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function h(t,e){if(t===e){var n=e[1],r=e[2],o=e[3],a=e[6],i=e[7],u=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=a,t[11]=e[14],t[12]=o,t[13]=i,t[14]=u}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function m(t,e){var n=e[0],r=e[1],o=e[2],a=e[3],i=e[4],u=e[5],c=e[6],l=e[7],s=e[8],d=e[9],f=e[10],h=e[11],m=e[12],M=e[13],v=e[14],w=e[15],g=n*u-r*i,b=n*c-o*i,x=n*l-a*i,p=r*c-o*u,A=r*l-a*u,E=o*l-a*c,R=s*M-d*m,T=s*v-f*m,_=s*w-h*m,y=d*v-f*M,F=d*w-h*M,P=f*w-h*v,C=g*P-b*F+x*y+p*_-A*T+E*R;return C?(C=1/C,t[0]=(u*P-c*F+l*y)*C,t[1]=(o*F-r*P-a*y)*C,t[2]=(M*E-v*A+w*p)*C,t[3]=(f*A-d*E-h*p)*C,t[4]=(c*_-i*P-l*T)*C,t[5]=(n*P-o*_+a*T)*C,t[6]=(v*x-m*E-w*b)*C,t[7]=(s*E-f*x+h*b)*C,t[8]=(i*F-u*_+l*R)*C,t[9]=(r*_-n*F-a*R)*C,t[10]=(m*A-M*x+w*g)*C,t[11]=(d*x-s*A-h*g)*C,t[12]=(u*T-i*y-c*R)*C,t[13]=(n*y-r*T+o*R)*C,t[14]=(M*b-m*p-v*g)*C,t[15]=(s*p-d*b+f*g)*C,t):null}function M(t,e){var n=e[0],r=e[1],o=e[2],a=e[3],i=e[4],u=e[5],c=e[6],l=e[7],s=e[8],d=e[9],f=e[10],h=e[11],m=e[12],M=e[13],v=e[14],w=e[15];return t[0]=u*(f*w-h*v)-d*(c*w-l*v)+M*(c*h-l*f),t[1]=-(r*(f*w-h*v)-d*(o*w-a*v)+M*(o*h-a*f)),t[2]=r*(c*w-l*v)-u*(o*w-a*v)+M*(o*l-a*c),t[3]=-(r*(c*h-l*f)-u*(o*h-a*f)+d*(o*l-a*c)),t[4]=-(i*(f*w-h*v)-s*(c*w-l*v)+m*(c*h-l*f)),t[5]=n*(f*w-h*v)-s*(o*w-a*v)+m*(o*h-a*f),t[6]=-(n*(c*w-l*v)-i*(o*w-a*v)+m*(o*l-a*c)),t[7]=n*(c*h-l*f)-i*(o*h-a*f)+s*(o*l-a*c),t[8]=i*(d*w-h*M)-s*(u*w-l*M)+m*(u*h-l*d),t[9]=-(n*(d*w-h*M)-s*(r*w-a*M)+m*(r*h-a*d)),t[10]=n*(u*w-l*M)-i*(r*w-a*M)+m*(r*l-a*u),t[11]=-(n*(u*h-l*d)-i*(r*h-a*d)+s*(r*l-a*u)),t[12]=-(i*(d*v-f*M)-s*(u*v-c*M)+m*(u*f-c*d)),t[13]=n*(d*v-f*M)-s*(r*v-o*M)+m*(r*f-o*d),t[14]=-(n*(u*v-c*M)-i*(r*v-o*M)+m*(r*c-o*u)),t[15]=n*(u*f-c*d)-i*(r*f-o*d)+s*(r*c-o*u),t}function v(t){var e=t[0],n=t[1],r=t[2],o=t[3],a=t[4],i=t[5],u=t[6],c=t[7],l=t[8],s=t[9],d=t[10],f=t[11],h=t[12],m=t[13],M=t[14],v=t[15];return(e*i-n*a)*(d*v-f*M)-(e*u-r*a)*(s*v-f*m)+(e*c-o*a)*(s*M-d*m)+(n*u-r*i)*(l*v-f*h)-(n*c-o*i)*(l*M-d*h)+(r*c-o*u)*(l*m-s*h)}function w(t,e,n){var r=e[0],o=e[1],a=e[2],i=e[3],u=e[4],c=e[5],l=e[6],s=e[7],d=e[8],f=e[9],h=e[10],m=e[11],M=e[12],v=e[13],w=e[14],g=e[15],b=n[0],x=n[1],p=n[2],A=n[3];return t[0]=b*r+x*u+p*d+A*M,t[1]=b*o+x*c+p*f+A*v,t[2]=b*a+x*l+p*h+A*w,t[3]=b*i+x*s+p*m+A*g,b=n[4],x=n[5],p=n[6],A=n[7],t[4]=b*r+x*u+p*d+A*M,t[5]=b*o+x*c+p*f+A*v,t[6]=b*a+x*l+p*h+A*w,t[7]=b*i+x*s+p*m+A*g,b=n[8],x=n[9],p=n[10],A=n[11],t[8]=b*r+x*u+p*d+A*M,t[9]=b*o+x*c+p*f+A*v,t[10]=b*a+x*l+p*h+A*w,t[11]=b*i+x*s+p*m+A*g,b=n[12],x=n[13],p=n[14],A=n[15],t[12]=b*r+x*u+p*d+A*M,t[13]=b*o+x*c+p*f+A*v,t[14]=b*a+x*l+p*h+A*w,t[15]=b*i+x*s+p*m+A*g,t}function g(t,e,n){var r,o,a,i,u,c,l,s,d,f,h,m,M=n[0],v=n[1],w=n[2];return e===t?(t[12]=e[0]*M+e[4]*v+e[8]*w+e[12],t[13]=e[1]*M+e[5]*v+e[9]*w+e[13],t[14]=e[2]*M+e[6]*v+e[10]*w+e[14],t[15]=e[3]*M+e[7]*v+e[11]*w+e[15]):(r=e[0],o=e[1],a=e[2],i=e[3],u=e[4],c=e[5],l=e[6],s=e[7],d=e[8],f=e[9],h=e[10],m=e[11],t[0]=r,t[1]=o,t[2]=a,t[3]=i,t[4]=u,t[5]=c,t[6]=l,t[7]=s,t[8]=d,t[9]=f,t[10]=h,t[11]=m,t[12]=r*M+u*v+d*w+e[12],t[13]=o*M+c*v+f*w+e[13],t[14]=a*M+l*v+h*w+e[14],t[15]=i*M+s*v+m*w+e[15]),t}function b(t,e,n){var r=n[0],o=n[1],a=n[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*o,t[5]=e[5]*o,t[6]=e[6]*o,t[7]=e[7]*o,t[8]=e[8]*a,t[9]=e[9]*a,t[10]=e[10]*a,t[11]=e[11]*a,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function x(t,e,n,r){var o,i,u,c,l,s,d,f,h,m,M,v,w,g,b,x,p,A,E,R,T,_,y,F,P=r[0],C=r[1],B=r[2],U=Math.hypot(P,C,B);return U<a?null:(P*=U=1/U,C*=U,B*=U,o=Math.sin(n),u=1-(i=Math.cos(n)),c=e[0],l=e[1],s=e[2],d=e[3],f=e[4],h=e[5],m=e[6],M=e[7],v=e[8],w=e[9],g=e[10],b=e[11],x=P*P*u+i,p=C*P*u+B*o,A=B*P*u-C*o,E=P*C*u-B*o,R=C*C*u+i,T=B*C*u+P*o,_=P*B*u+C*o,y=C*B*u-P*o,F=B*B*u+i,t[0]=c*x+f*p+v*A,t[1]=l*x+h*p+w*A,t[2]=s*x+m*p+g*A,t[3]=d*x+M*p+b*A,t[4]=c*E+f*R+v*T,t[5]=l*E+h*R+w*T,t[6]=s*E+m*R+g*T,t[7]=d*E+M*R+b*T,t[8]=c*_+f*y+v*F,t[9]=l*_+h*y+w*F,t[10]=s*_+m*y+g*F,t[11]=d*_+M*y+b*F,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function p(t,e,n){var r=Math.sin(n),o=Math.cos(n),a=e[4],i=e[5],u=e[6],c=e[7],l=e[8],s=e[9],d=e[10],f=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=a*o+l*r,t[5]=i*o+s*r,t[6]=u*o+d*r,t[7]=c*o+f*r,t[8]=l*o-a*r,t[9]=s*o-i*r,t[10]=d*o-u*r,t[11]=f*o-c*r,t}function A(t,e,n){var r=Math.sin(n),o=Math.cos(n),a=e[0],i=e[1],u=e[2],c=e[3],l=e[8],s=e[9],d=e[10],f=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*o-l*r,t[1]=i*o-s*r,t[2]=u*o-d*r,t[3]=c*o-f*r,t[8]=a*r+l*o,t[9]=i*r+s*o,t[10]=u*r+d*o,t[11]=c*r+f*o,t}function E(t,e,n){var r=Math.sin(n),o=Math.cos(n),a=e[0],i=e[1],u=e[2],c=e[3],l=e[4],s=e[5],d=e[6],f=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=a*o+l*r,t[1]=i*o+s*r,t[2]=u*o+d*r,t[3]=c*o+f*r,t[4]=l*o-a*r,t[5]=s*o-i*r,t[6]=d*o-u*r,t[7]=f*o-c*r,t}function R(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function T(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function _(t,e,n){var r,o,i,u=n[0],c=n[1],l=n[2],s=Math.hypot(u,c,l);return s<a?null:(u*=s=1/s,c*=s,l*=s,r=Math.sin(e),i=1-(o=Math.cos(e)),t[0]=u*u*i+o,t[1]=c*u*i+l*r,t[2]=l*u*i-c*r,t[3]=0,t[4]=u*c*i-l*r,t[5]=c*c*i+o,t[6]=l*c*i+u*r,t[7]=0,t[8]=u*l*i+c*r,t[9]=c*l*i-u*r,t[10]=l*l*i+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function y(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function F(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function P(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function C(t,e,n){var r=e[0],o=e[1],a=e[2],i=e[3],u=r+r,c=o+o,l=a+a,s=r*u,d=r*c,f=r*l,h=o*c,m=o*l,M=a*l,v=i*u,w=i*c,g=i*l;return t[0]=1-(h+M),t[1]=d+g,t[2]=f-w,t[3]=0,t[4]=d-g,t[5]=1-(s+M),t[6]=m+v,t[7]=0,t[8]=f+w,t[9]=m-v,t[10]=1-(s+h),t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function B(t,e){var n=new i(3),r=-e[0],o=-e[1],a=-e[2],u=e[3],c=e[4],l=e[5],s=e[6],d=e[7],f=r*r+o*o+a*a+u*u;return f>0?(n[0]=2*(c*u+d*r+l*a-s*o)/f,n[1]=2*(l*u+d*o+s*r-c*a)/f,n[2]=2*(s*u+d*a+c*o-l*r)/f):(n[0]=2*(c*u+d*r+l*a-s*o),n[1]=2*(l*u+d*o+s*r-c*a),n[2]=2*(s*u+d*a+c*o-l*r)),C(t,e,n),t}function U(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function L(t,e){var n=e[0],r=e[1],o=e[2],a=e[4],i=e[5],u=e[6],c=e[8],l=e[9],s=e[10];return t[0]=Math.hypot(n,r,o),t[1]=Math.hypot(a,i,u),t[2]=Math.hypot(c,l,s),t}function S(t,e){var n=new i(3);L(n,e);var r=1/n[0],o=1/n[1],a=1/n[2],u=e[0]*r,c=e[1]*o,l=e[2]*a,s=e[4]*r,d=e[5]*o,f=e[6]*a,h=e[8]*r,m=e[9]*o,M=e[10]*a,v=u+d+M,w=0;return v>0?(w=2*Math.sqrt(v+1),t[3]=.25*w,t[0]=(f-m)/w,t[1]=(h-l)/w,t[2]=(c-s)/w):u>d&&u>M?(w=2*Math.sqrt(1+u-d-M),t[3]=(f-m)/w,t[0]=.25*w,t[1]=(c+s)/w,t[2]=(h+l)/w):d>M?(w=2*Math.sqrt(1+d-u-M),t[3]=(h-l)/w,t[0]=(c+s)/w,t[1]=.25*w,t[2]=(f+m)/w):(w=2*Math.sqrt(1+M-u-d),t[3]=(c-s)/w,t[0]=(h+l)/w,t[1]=(f+m)/w,t[2]=.25*w),t}function D(t,e,n,r){var o=e[0],a=e[1],i=e[2],u=e[3],c=o+o,l=a+a,s=i+i,d=o*c,f=o*l,h=o*s,m=a*l,M=a*s,v=i*s,w=u*c,g=u*l,b=u*s,x=r[0],p=r[1],A=r[2];return t[0]=(1-(m+v))*x,t[1]=(f+b)*x,t[2]=(h-g)*x,t[3]=0,t[4]=(f-b)*p,t[5]=(1-(d+v))*p,t[6]=(M+w)*p,t[7]=0,t[8]=(h+g)*A,t[9]=(M-w)*A,t[10]=(1-(d+m))*A,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function I(t,e,n,r,o){var a=e[0],i=e[1],u=e[2],c=e[3],l=a+a,s=i+i,d=u+u,f=a*l,h=a*s,m=a*d,M=i*s,v=i*d,w=u*d,g=c*l,b=c*s,x=c*d,p=r[0],A=r[1],E=r[2],R=o[0],T=o[1],_=o[2],y=(1-(M+w))*p,F=(h+x)*p,P=(m-b)*p,C=(h-x)*A,B=(1-(f+w))*A,U=(v+g)*A,L=(m+b)*E,S=(v-g)*E,D=(1-(f+M))*E;return t[0]=y,t[1]=F,t[2]=P,t[3]=0,t[4]=C,t[5]=B,t[6]=U,t[7]=0,t[8]=L,t[9]=S,t[10]=D,t[11]=0,t[12]=n[0]+R-(y*R+C*T+L*_),t[13]=n[1]+T-(F*R+B*T+S*_),t[14]=n[2]+_-(P*R+U*T+D*_),t[15]=1,t}function V(t,e){var n=e[0],r=e[1],o=e[2],a=e[3],i=n+n,u=r+r,c=o+o,l=n*i,s=r*i,d=r*u,f=o*i,h=o*u,m=o*c,M=a*i,v=a*u,w=a*c;return t[0]=1-d-m,t[1]=s+w,t[2]=f-v,t[3]=0,t[4]=s-w,t[5]=1-l-m,t[6]=h+M,t[7]=0,t[8]=f+v,t[9]=h-M,t[10]=1-l-d,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function N(t,e,n,r,o,a,i){var u=1/(n-e),c=1/(o-r),l=1/(a-i);return t[0]=2*a*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*a*c,t[6]=0,t[7]=0,t[8]=(n+e)*u,t[9]=(o+r)*c,t[10]=(i+a)*l,t[11]=-1,t[12]=0,t[13]=0,t[14]=i*a*2*l,t[15]=0,t}function Y(t,e,n,r,o){var a,i=1/Math.tan(e/2);return t[0]=i/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=i,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0?(a=1/(r-o),t[10]=(o+r)*a,t[14]=2*o*r*a):(t[10]=-1,t[14]=-2*r),t}function O(t,e,n,r){var o=Math.tan(e.upDegrees*Math.PI/180),a=Math.tan(e.downDegrees*Math.PI/180),i=Math.tan(e.leftDegrees*Math.PI/180),u=Math.tan(e.rightDegrees*Math.PI/180),c=2/(i+u),l=2/(o+a);return t[0]=c,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=l,t[6]=0,t[7]=0,t[8]=-(i-u)*c*.5,t[9]=(o-a)*l*.5,t[10]=r/(n-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*n/(n-r),t[15]=0,t}function W(t,e,n,r,o,a,i){var u=1/(e-n),c=1/(r-o),l=1/(a-i);return t[0]=-2*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*c,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+n)*u,t[13]=(o+r)*c,t[14]=(i+a)*l,t[15]=1,t}function j(t,e,n,r){var o,i,u,c,l,s,d,h,m,M,v=e[0],w=e[1],g=e[2],b=r[0],x=r[1],p=r[2],A=n[0],E=n[1],R=n[2];return Math.abs(v-A)<a&&Math.abs(w-E)<a&&Math.abs(g-R)<a?f(t):(d=v-A,h=w-E,m=g-R,o=x*(m*=M=1/Math.hypot(d,h,m))-p*(h*=M),i=p*(d*=M)-b*m,u=b*h-x*d,(M=Math.hypot(o,i,u))?(o*=M=1/M,i*=M,u*=M):(o=0,i=0,u=0),c=h*u-m*i,l=m*o-d*u,s=d*i-h*o,(M=Math.hypot(c,l,s))?(c*=M=1/M,l*=M,s*=M):(c=0,l=0,s=0),t[0]=o,t[1]=c,t[2]=d,t[3]=0,t[4]=i,t[5]=l,t[6]=h,t[7]=0,t[8]=u,t[9]=s,t[10]=m,t[11]=0,t[12]=-(o*v+i*w+u*g),t[13]=-(c*v+l*w+s*g),t[14]=-(d*v+h*w+m*g),t[15]=1,t)}function X(t,e,n,r){var o=e[0],a=e[1],i=e[2],u=r[0],c=r[1],l=r[2],s=o-n[0],d=a-n[1],f=i-n[2],h=s*s+d*d+f*f;h>0&&(s*=h=1/Math.sqrt(h),d*=h,f*=h);var m=c*f-l*d,M=l*s-u*f,v=u*d-c*s;return(h=m*m+M*M+v*v)>0&&(m*=h=1/Math.sqrt(h),M*=h,v*=h),t[0]=m,t[1]=M,t[2]=v,t[3]=0,t[4]=d*v-f*M,t[5]=f*m-s*v,t[6]=s*M-d*m,t[7]=0,t[8]=s,t[9]=d,t[10]=f,t[11]=0,t[12]=o,t[13]=a,t[14]=i,t[15]=1,t}function q(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function z(t){return Math.hypot(t[0],t[1],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function H(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t[9]=e[9]+n[9],t[10]=e[10]+n[10],t[11]=e[11]+n[11],t[12]=e[12]+n[12],t[13]=e[13]+n[13],t[14]=e[14]+n[14],t[15]=e[15]+n[15],t}function k(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t[9]=e[9]-n[9],t[10]=e[10]-n[10],t[11]=e[11]-n[11],t[12]=e[12]-n[12],t[13]=e[13]-n[13],t[14]=e[14]-n[14],t[15]=e[15]-n[15],t}function G(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12]*n,t[13]=e[13]*n,t[14]=e[14]*n,t[15]=e[15]*n,t}function Z(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t[4]=e[4]+n[4]*r,t[5]=e[5]+n[5]*r,t[6]=e[6]+n[6]*r,t[7]=e[7]+n[7]*r,t[8]=e[8]+n[8]*r,t[9]=e[9]+n[9]*r,t[10]=e[10]+n[10]*r,t[11]=e[11]+n[11]*r,t[12]=e[12]+n[12]*r,t[13]=e[13]+n[13]*r,t[14]=e[14]+n[14]*r,t[15]=e[15]+n[15]*r,t}function Q(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function $(t,e){var n=t[0],r=t[1],o=t[2],i=t[3],u=t[4],c=t[5],l=t[6],s=t[7],d=t[8],f=t[9],h=t[10],m=t[11],M=t[12],v=t[13],w=t[14],g=t[15],b=e[0],x=e[1],p=e[2],A=e[3],E=e[4],R=e[5],T=e[6],_=e[7],y=e[8],F=e[9],P=e[10],C=e[11],B=e[12],U=e[13],L=e[14],S=e[15];return Math.abs(n-b)<=a*Math.max(1,Math.abs(n),Math.abs(b))&&Math.abs(r-x)<=a*Math.max(1,Math.abs(r),Math.abs(x))&&Math.abs(o-p)<=a*Math.max(1,Math.abs(o),Math.abs(p))&&Math.abs(i-A)<=a*Math.max(1,Math.abs(i),Math.abs(A))&&Math.abs(u-E)<=a*Math.max(1,Math.abs(u),Math.abs(E))&&Math.abs(c-R)<=a*Math.max(1,Math.abs(c),Math.abs(R))&&Math.abs(l-T)<=a*Math.max(1,Math.abs(l),Math.abs(T))&&Math.abs(s-_)<=a*Math.max(1,Math.abs(s),Math.abs(_))&&Math.abs(d-y)<=a*Math.max(1,Math.abs(d),Math.abs(y))&&Math.abs(f-F)<=a*Math.max(1,Math.abs(f),Math.abs(F))&&Math.abs(h-P)<=a*Math.max(1,Math.abs(h),Math.abs(P))&&Math.abs(m-C)<=a*Math.max(1,Math.abs(m),Math.abs(C))&&Math.abs(M-B)<=a*Math.max(1,Math.abs(M),Math.abs(B))&&Math.abs(v-U)<=a*Math.max(1,Math.abs(v),Math.abs(U))&&Math.abs(w-L)<=a*Math.max(1,Math.abs(w),Math.abs(L))&&Math.abs(g-S)<=a*Math.max(1,Math.abs(g),Math.abs(S))}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var K=w,J=k;let tt,et,nt,rt,ot,at,it,ut,ct=0,lt=!1,st=[0,0,-5],dt=[0,0,-5],ft=null;function ht(t,e,n){const o=t.getContext("webgl2")||t.getContext("experimental-webgl");if(!o)return void window.alert("Unable to initialize WebGL. Your browser or machine may not support it.");const a=n(o);et=o.getAttribLocation(a,"aVertexPosition"),nt=o.getAttribLocation(a,"aVertexNormal"),rt=o.getUniformLocation(a,"uProjectionMatrix"),ot=o.getUniformLocation(a,"uModelViewMatrix"),at=o.getUniformLocation(a,"uWorldMatrix"),it=o.getUniformLocation(a,"uTexture"),ut=o.getUniformLocation(a,"uWorldCameraPosition");const i={program:a,attribLocations:{vertexNormal:o.getAttribLocation(a,"aVertexNormal"),vertexPosition:o.getAttribLocation(a,"aVertexPosition"),vertexColor:o.getAttribLocation(a,"aVertexColor")},uniformLocations:{projectionMatrix:o.getUniformLocation(a,"uProjectionMatrix"),modelViewMatrix:o.getUniformLocation(a,"uModelViewMatrix"),normalMatrix:o.getUniformLocation(a,"uNormalMatrix"),worldMatrix:o.getUniformLocation(a,"uWorldMatrix"),textureLocation:o.getUniformLocation(a,"uTexture"),worldCameraPositionLocation:o.getUniformLocation(a,"uWorldCameraPosition")}};ft=e(o);let u=0;o.clearColor(0,0,0,1);const c=e=>{if(!lt){const n=(e*=.001)-u;u=e,function(t,e,n,o,a){e.viewport(0,0,t.width,t.height),e.enable(e.CULL_FACE),e.enable(e.DEPTH_TEST),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT);const i=60*Math.PI/180,u=e.canvas.clientWidth/e.canvas.clientHeight,c=r.perspective(r.create(),i,u,.1,100);vt(e,n,o,c,null,a)}(t,o,i,ft,n),window.requestAnimationFrame(c)}},l=e=>{if(null==tt||!lt)return;tt.requestAnimationFrame(l);const n=(e*=.001)-u;u=e,function(t,e,n,r,o){e.viewport(0,0,t.width,t.height),e.enable(e.CULL_FACE),e.enable(e.DEPTH_TEST),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),e.depthFunc(e.LEQUAL),Mt(t,e,n,r,!0,o),Mt(t,e,n,r,!1,o),tt.submitFrame()}(t,o,i,ft,n)};return function(t,e,n,r,o,a){if("function"!=typeof navigator.getVRDisplays)return void window.alert("Your browser does not support WebVR");navigator.getVRDisplays().then(t=>{null!==t&&t.length>0&&((tt=t[t.length-1]).depthNear=.1,tt.depthFar=100)}),window.addEventListener("vrdisplaypresentchange",()=>{if(null!=tt&&tt.isPresenting){const e=tt.getEyeParameters("left");t.width=2*e.renderWidth,t.height=e.renderHeight,tt.requestAnimationFrame(a)}else null!==tt&&(console.log("Exit VR"),lt=!1,t.width=640,t.height=480,window.requestAnimationFrame(o))})}(t,0,0,0,c,l),window.requestAnimationFrame(c),window.vrButton=document.createElement("button"),window.vrButton.innerHTML="Enter VR",window.vrButton.onclick=function(){console.log("Enter VR"),null!=tt&&(lt=!0,tt.requestPresent([{source:t}]))},window.vrButton.style="position: absolute; bottom: 20px; right:50px;",window.document.body.append(window.vrButton),{gl:o,updateContext:mt}}function mt(t,e){for(const n in e){if("buffers"===n&&"function"==typeof e.buffers&&(ft=e.buffers(t)),"viewPosition"===n&&Array.isArray(e.viewPosition)){const t=e.viewPosition;if("cameraDelta"in e&&Array.isArray(e.cameraDelta)){e.cameraDelta.forEach((e,n,r)=>{t[n]?st[n]<t[n]?st[n]=st[n]+e:st[n]=t[n]:st[n]=st[n]+e})}else t.forEach((t,e,n)=>st[e]=t)}else"viewPosition"===n&&(st=e.viewPosition);if("worldCameraPosition"===n&&Array.isArray(e.worldCameraPosition)){const t=e.worldCameraPosition;if("cameraDelta"in e&&Array.isArray(e.cameraDelta)){e.cameraDelta.forEach((e,n,r)=>{t[n]?dt[n]<t[n]?dt[n]=dt[n]+e:dt[n]=t[n]:dt[n]=dt[n]+e})}else t.forEach((t,e,n)=>dt[e]=t)}}}function Mt(t,e,n,r,o,a){let i,u,c=t.width,l=t.height,s=new VRFrameData;tt.getFrameData(s),o?(e.viewport(0,0,c/2,l),i=s.leftProjectionMatrix,u=s.leftViewMatrix):(e.viewport(c/2,0,c/2,l),i=s.rightProjectionMatrix,u=s.rightViewMatrix),vt(e,n,r,i,u,a)}function vt(t,e,n,o,a=null,i){const u=.4*(ct+=i),c=.7*ct;t.useProgram(e.program),t.uniformMatrix4fv(rt,!1,o);const l=null!==st?st:[0,0,dt[2]/5],s=r.lookAt(r.create(),l,[0,0,0],[0,1,0]),d=r.invert(r.create(),s);r.rotateZ(d,d,Math.PI);const f=r.rotateX(r.create(),r.create(),u);r.rotateY(f,f,c),r.rotateZ(f,f,Math.PI/2),null!==a&&r.multiply(d,a,d);{const r=3,o=t.FLOAT,a=!1,i=0,u=0;t.enableVertexAttribArray(e.attribLocations.vertexPosition),t.bindBuffer(t.ARRAY_BUFFER,n.position),t.vertexAttribPointer(e.attribLocations.vertexPosition,r,o,a,i,u)}{const r=3,o=t.FLOAT,a=!1,i=0,u=0;t.enableVertexAttribArray(e.attribLocations.vertexNormal),t.bindBuffer(t.ARRAY_BUFFER,n.normal),t.vertexAttribPointer(e.attribLocations.vertexNormal,r,o,a,i,u)}t.uniformMatrix4fv(rt,!1,o),t.uniformMatrix4fv(ot,!1,d),t.uniformMatrix4fv(at,!1,f),t.uniform3fv(ut,null!==st?l:dt),t.uniform1i(it,0),t.drawArrays(t.TRIANGLES,0,n.positionSize/3)}function wt(t){const e=t.createBuffer(),n=[-.5,-.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,-.5,.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,.5,.5,-.5,.5,.5,.5,.5,-.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,.5,.5,.5,.5,.5,.5,-.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,-.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,.5,-.5,-.5,.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,.5,.5,-.5,.5,.5,.5];var r=t.createBuffer(),o=[0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0];const a=t.createBuffer(),i=[0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1],u=t.createBuffer(),c=[0,1,2,0,2,3,4,5,7,7,5,6,1,4,7,1,0,4,6,3,2,6,5,3,1,7,2,7,6,2,0,5,4,5,0,3];return t.bindBuffer(t.ARRAY_BUFFER,e),t.bufferData(t.ARRAY_BUFFER,new Float32Array(n),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,new Float32Array(o),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,a),t.bufferData(t.ARRAY_BUFFER,new Float32Array(i),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,u),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(c),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),{position:e,positionSize:n.length,normal:r,normalSize:o.length,index:u,indexSize:c.length,color:a,colorSize:i.length}}function gt(t){const e=t.createBuffer(),n=[-.5,.5,-.5,-.5,-.5,-.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,.5,.5,-.5,.5,.5,.5,.5,-.5,.5,-.5,.5,-.5,-.5,.5,-.5,.5,.5,.5,-.5,.5,-.5,.5,.5,.5,.5,.5,.5,-.5,-.5,-.5,-.5,-.5,-.5,-.5,.5,.5,-.5,-.5,-.5,-.5,.5,.5,-.5,.5,-.5,-.5,.5,-.5,-.5,-.5,-.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,.5,-.5,.5,.5,.5,-.5,.5,-.5,.5,.5,.5,.5];var r=t.createBuffer();const o=t.createBuffer(),a=[0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1],i=t.createBuffer(),u=[0,1,2,0,2,3,4,5,7,7,5,6,1,4,7,1,0,4,6,3,2,6,5,3,1,7,2,7,6,2,0,5,4,5,0,3];return t.bindBuffer(t.ARRAY_BUFFER,e),t.bufferData(t.ARRAY_BUFFER,new Float32Array(n),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,r),t.bufferData(t.ARRAY_BUFFER,new Float32Array([-1,1,-1,-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,1,-1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,1,1,1,1,-1,1,-1,1,-1,-1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,1,-1,1,1,1,-1,1,-1,1,1,1,1]),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,o),t.bufferData(t.ARRAY_BUFFER,new Float32Array(a),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,i),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(u),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),{position:e,positionSize:n.length,normal:r,normalSize:[0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,-1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0].length,index:i,indexSize:u.length,color:o,colorSize:a.length}}function bt(t){const e=xt(t,t.VERTEX_SHADER,"#version 300 es\nprecision mediump float;\n\nin vec4 aVertexColor;\nin vec3 aVertexNormal;\nin vec3 aVertexPosition;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uNormalMatrix;\nuniform vec3 uLightDirection;\nuniform vec3 uLightDiffuse;\nuniform vec3 uMaterialDiffuse;\nuniform mat4 uProjectionMatrix;\nuniform mat4 uWorldMatrix;\n\nout vec3 v_normal;\nout vec3 v_worldNormal;\nout vec3 v_worldPosition;\n\nout lowp vec4 vVertexColor;\n\nvoid main() {\n  \n  // vVertexColor = aVertexColor;\n  \n  // gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0); // vec4 aVertexPosition\n  \n  // Calculate the normal vector\n  // vec3 N = normalize(vec3(uNormalMatrix * vec4(aVertexNormal, 1.0)));\n\n  // Normalized light direction\n  // vec3 L = normalize(uLightDirection);\n\n  // Dot product of the normal product and negative light direction vector\n  // float lambertTerm = dot(N, -L);\n\n  // Calculating the diffuse color based on the Lambertian reflection model\n  // vec3 Id = uMaterialDiffuse * uLightDiffuse * lambertTerm;\n  // vec3 Id = aVertexColor.rgb * uLightDiffuse * lambertTerm;\n\n  // Set the varying to be used inside of the fragment shader\n  // vVertexColor = vec4(Id, 1.0);\n\n  // Setting the vertex position\n  // gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\n  // Pass a normal. Since the positions\n  // centered around the origin we can just \n  // pass the position\n  // v_normal = normalize(aVertexPosition);\n  \n  // Multiply the position by the matrix.\n  gl_Position = uProjectionMatrix * uModelViewMatrix * uWorldMatrix * vec4(aVertexPosition, 1.0);\n   \n  // send the view position to the fragment shader\n  v_worldPosition = (uWorldMatrix * vec4(aVertexPosition, 1.0)).xyz;\n \n  // orient the normals and pass to the fragment shader\n  v_worldNormal = mat3(uWorldMatrix) * aVertexNormal;\n}\n"),n=xt(t,t.FRAGMENT_SHADER,"#version 300 es\nprecision mediump float;\n\n// The texture.\nuniform samplerCube uTexture;\n\n// The position of the camera\nuniform vec3 uWorldCameraPosition;\n\n// Passed in from the vertex shader.\nin vec3 v_normal;\nin vec3 v_worldNormal;\nin vec3 v_worldPosition;\n\nin mediump vec4 vVertexColor;\n\nout mediump vec4 fragColor;\n\nvoid main() {\n  // fragColor = vVertexColor;\n  //fragColor = textureCube(uTexture, normalize(v_normal));\n  \n  vec3 worldNormal = normalize(v_worldNormal);\n  vec3 eyeToSurfaceDir = normalize(v_worldPosition - uWorldCameraPosition);\n  vec3 direction = reflect(eyeToSurfaceDir, worldNormal);\n \n  fragColor = texture(uTexture, direction);\n}\n"),r=t.createProgram();return t.attachShader(r,e),t.attachShader(r,n),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS)?r:(window.alert("Unable to initialize the shader program: "+t.getProgramInfoLog(r)),null)}function xt(t,e,n){const r=t.createShader(e);return t.shaderSource(r,n),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS)?r:(window.alert("An error occurred compiling the shaders: "+t.getShaderInfoLog(r)),t.deleteShader(r),null)}const pt=null!==window.document.querySelector("canvas#cv")?window.document.querySelector("canvas#cv"):window.document.createElement("canvas");!function(){"cv"!==pt.id&&(pt.width=window.innerWidth,pt.height=window.innerHeight,pt.style.display="block",pt.style.margin="auto",pt.style.width=window.outerWidth+"px",.99*window.outerWidth*pt.height/pt.width<window.innerHeight?pt.style.height=window.outerWidth*pt.height/pt.width+"px":(pt.style.height=.99*window.outerHeight+"px",pt.style.width=window.outerHeight*pt.width/pt.height+"px"),window.document.body.append(pt)),window.document.body.style.backgroundColor="#000000",window.document.body.style.margin="0px",window.document.body.style.overflow="hidden";const{gl:t,updateContext:e}=ht(pt,wt,bt);!function(t){window.onkeydown=function(e){switch(e.keyCode){case 49:o(t,0,0,0,1);break;case 50:o(t,.2,.8,.2,1);break;case 51:o(t,.2,.2,.8,1);break;case 52:o(t,Math.random(),Math.random(),Math.random(),1)}}}(t);const n=document.createElement("canvas").getContext("2d");n.canvas.width=128,n.canvas.height=128;const r=t.createTexture();t.bindTexture(t.TEXTURE_CUBE_MAP,r);const a=null!==window.document.querySelector("#aud1")?window.document.querySelector("#aud1"):document.createElement("video");if("aud1"!==a.id){const t=document.createElement("source"),e=document.createElement("source");t.src="data/fathers.mp4",e.src="data/fathers.ogv",a.append(t),a.append(e)}else window.aud1=a;let i=a.children[0].src.match(/[\/|\\]*([\w|\-|]+)\.\w\w\w$/)[1];a.pause(),console.log(i);let u=0,c=null,l=(new Date).getTime(),s=!1,d=!1;window.userTriggered=!1;const f=document.createElement("canvas"),h=document.createElement("canvas");f.width=h.width=n.canvas.width,f.height=h.height=n.canvas.height,[{target:t.TEXTURE_CUBE_MAP_POSITIVE_X,faceColor:"#F00",textColor:"#0FF",text:"+X"},{target:t.TEXTURE_CUBE_MAP_NEGATIVE_X,faceColor:"#FF0",textColor:"#00F",text:"-X"},{target:t.TEXTURE_CUBE_MAP_POSITIVE_Y,faceColor:"#0F0",textColor:"#F0F",text:"+Y"},{target:t.TEXTURE_CUBE_MAP_NEGATIVE_Y,faceColor:"#0FF",textColor:"#F00",text:"-Y"},{target:t.TEXTURE_CUBE_MAP_POSITIVE_Z,faceColor:"#00F",textColor:"#FF0",text:"+Z"},{target:t.TEXTURE_CUBE_MAP_NEGATIVE_Z,faceColor:"#F0F",textColor:"#0F0",text:"-Z"}].forEach((e,o,i)=>{const{target:c,faceColor:l,textColor:s,text:d}=e,m=new Image;m.crossOrigin="",m.id=""+(o+1),function(t,e,n,r){const{width:o,height:a}=t.canvas;t.fillStyle=e,t.fillRect(0,0,o,a),t.font=`${.7*o}px sans-serif`,t.textAlign="center",t.textBaseline="middle",t.fillStyle=n,t.fillText(r,o/2,a/2)}(n,l,s,d);const M=t.RGBA,v=t.RGBA,w=t.UNSIGNED_BYTE;t.texImage2D(c,0,M,512,512,0,v,w,null),m.src=a.poster,m.style.margin="auto",m.style.position="fixed",m.style.top="0px",m.style.left=o*n.canvas.width+"px",m.addEventListener("load",(function(){t.bindTexture(t.TEXTURE_CUBE_MAP,r),t.texImage2D(c,0,M,v,w,m),t.generateMipmap(t.TEXTURE_CUBE_MAP)})),n.canvas.toBlob(t=>{console.log(`Loading ${m.id} ...`),m.src=URL.createObjectURL(t),m.style.margin="auto",m.style.position="fixed",m.style.top="0px",m.style.left=o*n.canvas.width+"px"}),setInterval(t=>{u>0?(+m.id%2?n.drawImage(f,0,0,f.width,f.height):n.drawImage(h,0,0,h.width,h.height),a.currentTime>0&&n.canvas.toBlob(t=>{m.src=URL.createObjectURL(t)})):m.src=a.poster},66)}),t.generateMipmap(t.TEXTURE_CUBE_MAP),t.texParameteri(t.TEXTURE_CUBE_MAP,t.TEXTURE_MIN_FILTER,t.LINEAR_MIPMAP_LINEAR);const m=function(){if(d||!s&&!a.paused&&window.userTriggered)s||(console.log("Pause video!"),a.pause(),d=!0,null!=c&&(clearTimeout(c),c=null),setTimeout(t=>d=!1,1e3));else{s=!0,l=(new Date).getTime(),console.log("Play video"),a.play();
/*! Avoid any references to ctx (final buffer) within this routine !*/
const n=f.getContext("2d");n.globalAlpha=1;const r=h.getContext("2d");r.globalAlpha=1;const o=f.height,i=a.videoHeight*(f.width/f.height)/2,d=0,m=-(i-f.width)/1.75;c=setInterval(c=>{null!=a&&a.readyState>2&&!a.paused&&(++u%2?n.drawImage(a,d,0,i,o):r.drawImage(a,m,0,i,o)),a.currentTime>5&&!a.muted?e(t,{buffers:gt,cameraDelta:[0,0,.05],viewPosition:null,worldCameraPosition:[0,0,-1]}):a.currentTime>1&&!a.muted&&e(t,{cameraDelta:[0,0,.025],viewPosition:[0,0,-1],worldCameraPosition:[0,0,-1]})},33),setTimeout(t=>s=!1,1e3)}};window.addEventListener("keydown",(function(t){const e=t||window.event;return 32===e.keyCode&&(new Date).getTime()-l>500&&(m(),window.userTriggered||(a.currentTime=0,a.muted=!1,window.userTriggered=!0),setTimeout(t=>{e==KeyboardEvent&&(a.muted=!1)},33),e.preventDefault(),!0)})),window.playVideo=m}()}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,