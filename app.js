!function(t){var e={};function n(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=t,n.c=e,n.d=function(t,e,r){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:r})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)n.d(r,o,function(e){return t[e]}.bind(null,o));return r},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=9)}([function(t,e,n){"use strict";e.decode=e.parse=n(10),e.encode=e.stringify=n(11)},,,,,,,,,function(t,e,n){t.exports=n(12)},function(t,e,n){"use strict";function r(t,e){return Object.prototype.hasOwnProperty.call(t,e)}t.exports=function(t,e,n,i){e=e||"&",n=n||"=";var a={};if("string"!=typeof t||0===t.length)return a;var u=/\+/g;t=t.split(e);var s=1e3;i&&"number"==typeof i.maxKeys&&(s=i.maxKeys);var l=t.length;s>0&&l>s&&(l=s);for(var c=0;c<l;++c){var f,d,m,h,v=t[c].replace(u,"%20"),w=v.indexOf(n);w>=0?(f=v.substr(0,w),d=v.substr(w+1)):(f=v,d=""),m=decodeURIComponent(f),h=decodeURIComponent(d),r(a,m)?o(a[m])?a[m].push(h):a[m]=[a[m],h]:a[m]=h}return a};var o=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)}},function(t,e,n){"use strict";var r=function(t){switch(typeof t){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}};t.exports=function(t,e,n,u){return e=e||"&",n=n||"=",null===t&&(t=void 0),"object"==typeof t?i(a(t),(function(a){var u=encodeURIComponent(r(a))+n;return o(t[a])?i(t[a],(function(t){return u+encodeURIComponent(r(t))})).join(e):u+encodeURIComponent(r(t[a]))})).join(e):u?encodeURIComponent(r(u))+n+encodeURIComponent(r(t)):""};var o=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function i(t,e){if(t.map)return t.map(e);for(var n=[],r=0;r<t.length;r++)n.push(e(t[r],r));return n}var a=Object.keys||function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.push(n);return e}},function(t,e,n){"use strict";n.r(e);var r={};function o(t,e,n,r,o){t.clearColor(e,n,r,o),t.clear(t.COLOR_BUFFER_BIT)}n.r(r),n.d(r,"create",(function(){return u})),n.d(r,"clone",(function(){return s})),n.d(r,"copy",(function(){return l})),n.d(r,"fromValues",(function(){return c})),n.d(r,"set",(function(){return f})),n.d(r,"identity",(function(){return d})),n.d(r,"transpose",(function(){return m})),n.d(r,"invert",(function(){return h})),n.d(r,"adjoint",(function(){return v})),n.d(r,"determinant",(function(){return w})),n.d(r,"multiply",(function(){return g})),n.d(r,"translate",(function(){return M})),n.d(r,"scale",(function(){return x})),n.d(r,"rotate",(function(){return p})),n.d(r,"rotateX",(function(){return R})),n.d(r,"rotateY",(function(){return b})),n.d(r,"rotateZ",(function(){return P})),n.d(r,"fromTranslation",(function(){return A})),n.d(r,"fromScaling",(function(){return T})),n.d(r,"fromRotation",(function(){return E})),n.d(r,"fromXRotation",(function(){return _})),n.d(r,"fromYRotation",(function(){return y})),n.d(r,"fromZRotation",(function(){return C})),n.d(r,"fromRotationTranslation",(function(){return F})),n.d(r,"fromQuat2",(function(){return B})),n.d(r,"getTranslation",(function(){return D})),n.d(r,"getScaling",(function(){return L})),n.d(r,"getRotation",(function(){return S})),n.d(r,"fromRotationTranslationScale",(function(){return U})),n.d(r,"fromRotationTranslationScaleOrigin",(function(){return V})),n.d(r,"fromQuat",(function(){return I})),n.d(r,"frustum",(function(){return N})),n.d(r,"perspective",(function(){return Y})),n.d(r,"perspectiveFromFieldOfView",(function(){return O})),n.d(r,"ortho",(function(){return j})),n.d(r,"lookAt",(function(){return z})),n.d(r,"targetTo",(function(){return W})),n.d(r,"str",(function(){return X})),n.d(r,"frob",(function(){return q})),n.d(r,"add",(function(){return k})),n.d(r,"subtract",(function(){return H})),n.d(r,"multiplyScalar",(function(){return Z})),n.d(r,"multiplyScalarAndAdd",(function(){return G})),n.d(r,"exactEquals",(function(){return K})),n.d(r,"equals",(function(){return Q})),n.d(r,"mul",(function(){return J})),n.d(r,"sub",(function(){return $}));var i=1e-6,a="undefined"!=typeof Float32Array?Float32Array:Array;Math.random;Math.PI;function u(){var t=new a(16);return a!=Float32Array&&(t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=0,t[12]=0,t[13]=0,t[14]=0),t[0]=1,t[5]=1,t[10]=1,t[15]=1,t}function s(t){var e=new a(16);return e[0]=t[0],e[1]=t[1],e[2]=t[2],e[3]=t[3],e[4]=t[4],e[5]=t[5],e[6]=t[6],e[7]=t[7],e[8]=t[8],e[9]=t[9],e[10]=t[10],e[11]=t[11],e[12]=t[12],e[13]=t[13],e[14]=t[14],e[15]=t[15],e}function l(t,e){return t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function c(t,e,n,r,o,i,u,s,l,c,f,d,m,h,v,w){var g=new a(16);return g[0]=t,g[1]=e,g[2]=n,g[3]=r,g[4]=o,g[5]=i,g[6]=u,g[7]=s,g[8]=l,g[9]=c,g[10]=f,g[11]=d,g[12]=m,g[13]=h,g[14]=v,g[15]=w,g}function f(t,e,n,r,o,i,a,u,s,l,c,f,d,m,h,v,w){return t[0]=e,t[1]=n,t[2]=r,t[3]=o,t[4]=i,t[5]=a,t[6]=u,t[7]=s,t[8]=l,t[9]=c,t[10]=f,t[11]=d,t[12]=m,t[13]=h,t[14]=v,t[15]=w,t}function d(t){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function m(t,e){if(t===e){var n=e[1],r=e[2],o=e[3],i=e[6],a=e[7],u=e[11];t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=n,t[6]=e[9],t[7]=e[13],t[8]=r,t[9]=i,t[11]=e[14],t[12]=o,t[13]=a,t[14]=u}else t[0]=e[0],t[1]=e[4],t[2]=e[8],t[3]=e[12],t[4]=e[1],t[5]=e[5],t[6]=e[9],t[7]=e[13],t[8]=e[2],t[9]=e[6],t[10]=e[10],t[11]=e[14],t[12]=e[3],t[13]=e[7],t[14]=e[11],t[15]=e[15];return t}function h(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],a=e[4],u=e[5],s=e[6],l=e[7],c=e[8],f=e[9],d=e[10],m=e[11],h=e[12],v=e[13],w=e[14],g=e[15],M=n*u-r*a,x=n*s-o*a,p=n*l-i*a,R=r*s-o*u,b=r*l-i*u,P=o*l-i*s,A=c*v-f*h,T=c*w-d*h,E=c*g-m*h,_=f*w-d*v,y=f*g-m*v,C=d*g-m*w,F=M*C-x*y+p*_+R*E-b*T+P*A;return F?(F=1/F,t[0]=(u*C-s*y+l*_)*F,t[1]=(o*y-r*C-i*_)*F,t[2]=(v*P-w*b+g*R)*F,t[3]=(d*b-f*P-m*R)*F,t[4]=(s*E-a*C-l*T)*F,t[5]=(n*C-o*E+i*T)*F,t[6]=(w*p-h*P-g*x)*F,t[7]=(c*P-d*p+m*x)*F,t[8]=(a*y-u*E+l*A)*F,t[9]=(r*E-n*y-i*A)*F,t[10]=(h*b-v*p+g*M)*F,t[11]=(f*p-c*b-m*M)*F,t[12]=(u*T-a*_-s*A)*F,t[13]=(n*_-r*T+o*A)*F,t[14]=(v*x-h*R-w*M)*F,t[15]=(c*R-f*x+d*M)*F,t):null}function v(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],a=e[4],u=e[5],s=e[6],l=e[7],c=e[8],f=e[9],d=e[10],m=e[11],h=e[12],v=e[13],w=e[14],g=e[15];return t[0]=u*(d*g-m*w)-f*(s*g-l*w)+v*(s*m-l*d),t[1]=-(r*(d*g-m*w)-f*(o*g-i*w)+v*(o*m-i*d)),t[2]=r*(s*g-l*w)-u*(o*g-i*w)+v*(o*l-i*s),t[3]=-(r*(s*m-l*d)-u*(o*m-i*d)+f*(o*l-i*s)),t[4]=-(a*(d*g-m*w)-c*(s*g-l*w)+h*(s*m-l*d)),t[5]=n*(d*g-m*w)-c*(o*g-i*w)+h*(o*m-i*d),t[6]=-(n*(s*g-l*w)-a*(o*g-i*w)+h*(o*l-i*s)),t[7]=n*(s*m-l*d)-a*(o*m-i*d)+c*(o*l-i*s),t[8]=a*(f*g-m*v)-c*(u*g-l*v)+h*(u*m-l*f),t[9]=-(n*(f*g-m*v)-c*(r*g-i*v)+h*(r*m-i*f)),t[10]=n*(u*g-l*v)-a*(r*g-i*v)+h*(r*l-i*u),t[11]=-(n*(u*m-l*f)-a*(r*m-i*f)+c*(r*l-i*u)),t[12]=-(a*(f*w-d*v)-c*(u*w-s*v)+h*(u*d-s*f)),t[13]=n*(f*w-d*v)-c*(r*w-o*v)+h*(r*d-o*f),t[14]=-(n*(u*w-s*v)-a*(r*w-o*v)+h*(r*s-o*u)),t[15]=n*(u*d-s*f)-a*(r*d-o*f)+c*(r*s-o*u),t}function w(t){var e=t[0],n=t[1],r=t[2],o=t[3],i=t[4],a=t[5],u=t[6],s=t[7],l=t[8],c=t[9],f=t[10],d=t[11],m=t[12],h=t[13],v=t[14],w=t[15];return(e*a-n*i)*(f*w-d*v)-(e*u-r*i)*(c*w-d*h)+(e*s-o*i)*(c*v-f*h)+(n*u-r*a)*(l*w-d*m)-(n*s-o*a)*(l*v-f*m)+(r*s-o*u)*(l*h-c*m)}function g(t,e,n){var r=e[0],o=e[1],i=e[2],a=e[3],u=e[4],s=e[5],l=e[6],c=e[7],f=e[8],d=e[9],m=e[10],h=e[11],v=e[12],w=e[13],g=e[14],M=e[15],x=n[0],p=n[1],R=n[2],b=n[3];return t[0]=x*r+p*u+R*f+b*v,t[1]=x*o+p*s+R*d+b*w,t[2]=x*i+p*l+R*m+b*g,t[3]=x*a+p*c+R*h+b*M,x=n[4],p=n[5],R=n[6],b=n[7],t[4]=x*r+p*u+R*f+b*v,t[5]=x*o+p*s+R*d+b*w,t[6]=x*i+p*l+R*m+b*g,t[7]=x*a+p*c+R*h+b*M,x=n[8],p=n[9],R=n[10],b=n[11],t[8]=x*r+p*u+R*f+b*v,t[9]=x*o+p*s+R*d+b*w,t[10]=x*i+p*l+R*m+b*g,t[11]=x*a+p*c+R*h+b*M,x=n[12],p=n[13],R=n[14],b=n[15],t[12]=x*r+p*u+R*f+b*v,t[13]=x*o+p*s+R*d+b*w,t[14]=x*i+p*l+R*m+b*g,t[15]=x*a+p*c+R*h+b*M,t}function M(t,e,n){var r,o,i,a,u,s,l,c,f,d,m,h,v=n[0],w=n[1],g=n[2];return e===t?(t[12]=e[0]*v+e[4]*w+e[8]*g+e[12],t[13]=e[1]*v+e[5]*w+e[9]*g+e[13],t[14]=e[2]*v+e[6]*w+e[10]*g+e[14],t[15]=e[3]*v+e[7]*w+e[11]*g+e[15]):(r=e[0],o=e[1],i=e[2],a=e[3],u=e[4],s=e[5],l=e[6],c=e[7],f=e[8],d=e[9],m=e[10],h=e[11],t[0]=r,t[1]=o,t[2]=i,t[3]=a,t[4]=u,t[5]=s,t[6]=l,t[7]=c,t[8]=f,t[9]=d,t[10]=m,t[11]=h,t[12]=r*v+u*w+f*g+e[12],t[13]=o*v+s*w+d*g+e[13],t[14]=i*v+l*w+m*g+e[14],t[15]=a*v+c*w+h*g+e[15]),t}function x(t,e,n){var r=n[0],o=n[1],i=n[2];return t[0]=e[0]*r,t[1]=e[1]*r,t[2]=e[2]*r,t[3]=e[3]*r,t[4]=e[4]*o,t[5]=e[5]*o,t[6]=e[6]*o,t[7]=e[7]*o,t[8]=e[8]*i,t[9]=e[9]*i,t[10]=e[10]*i,t[11]=e[11]*i,t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15],t}function p(t,e,n,r){var o,a,u,s,l,c,f,d,m,h,v,w,g,M,x,p,R,b,P,A,T,E,_,y,C=r[0],F=r[1],B=r[2],D=Math.hypot(C,F,B);return D<i?null:(C*=D=1/D,F*=D,B*=D,o=Math.sin(n),u=1-(a=Math.cos(n)),s=e[0],l=e[1],c=e[2],f=e[3],d=e[4],m=e[5],h=e[6],v=e[7],w=e[8],g=e[9],M=e[10],x=e[11],p=C*C*u+a,R=F*C*u+B*o,b=B*C*u-F*o,P=C*F*u-B*o,A=F*F*u+a,T=B*F*u+C*o,E=C*B*u+F*o,_=F*B*u-C*o,y=B*B*u+a,t[0]=s*p+d*R+w*b,t[1]=l*p+m*R+g*b,t[2]=c*p+h*R+M*b,t[3]=f*p+v*R+x*b,t[4]=s*P+d*A+w*T,t[5]=l*P+m*A+g*T,t[6]=c*P+h*A+M*T,t[7]=f*P+v*A+x*T,t[8]=s*E+d*_+w*y,t[9]=l*E+m*_+g*y,t[10]=c*E+h*_+M*y,t[11]=f*E+v*_+x*y,e!==t&&(t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t)}function R(t,e,n){var r=Math.sin(n),o=Math.cos(n),i=e[4],a=e[5],u=e[6],s=e[7],l=e[8],c=e[9],f=e[10],d=e[11];return e!==t&&(t[0]=e[0],t[1]=e[1],t[2]=e[2],t[3]=e[3],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[4]=i*o+l*r,t[5]=a*o+c*r,t[6]=u*o+f*r,t[7]=s*o+d*r,t[8]=l*o-i*r,t[9]=c*o-a*r,t[10]=f*o-u*r,t[11]=d*o-s*r,t}function b(t,e,n){var r=Math.sin(n),o=Math.cos(n),i=e[0],a=e[1],u=e[2],s=e[3],l=e[8],c=e[9],f=e[10],d=e[11];return e!==t&&(t[4]=e[4],t[5]=e[5],t[6]=e[6],t[7]=e[7],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=i*o-l*r,t[1]=a*o-c*r,t[2]=u*o-f*r,t[3]=s*o-d*r,t[8]=i*r+l*o,t[9]=a*r+c*o,t[10]=u*r+f*o,t[11]=s*r+d*o,t}function P(t,e,n){var r=Math.sin(n),o=Math.cos(n),i=e[0],a=e[1],u=e[2],s=e[3],l=e[4],c=e[5],f=e[6],d=e[7];return e!==t&&(t[8]=e[8],t[9]=e[9],t[10]=e[10],t[11]=e[11],t[12]=e[12],t[13]=e[13],t[14]=e[14],t[15]=e[15]),t[0]=i*o+l*r,t[1]=a*o+c*r,t[2]=u*o+f*r,t[3]=s*o+d*r,t[4]=l*o-i*r,t[5]=c*o-a*r,t[6]=f*o-u*r,t[7]=d*o-s*r,t}function A(t,e){return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=e[0],t[13]=e[1],t[14]=e[2],t[15]=1,t}function T(t,e){return t[0]=e[0],t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=e[1],t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=e[2],t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function E(t,e,n){var r,o,a,u=n[0],s=n[1],l=n[2],c=Math.hypot(u,s,l);return c<i?null:(u*=c=1/c,s*=c,l*=c,r=Math.sin(e),a=1-(o=Math.cos(e)),t[0]=u*u*a+o,t[1]=s*u*a+l*r,t[2]=l*u*a-s*r,t[3]=0,t[4]=u*s*a-l*r,t[5]=s*s*a+o,t[6]=l*s*a+u*r,t[7]=0,t[8]=u*l*a+s*r,t[9]=s*l*a-u*r,t[10]=l*l*a+o,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t)}function _(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=1,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=r,t[6]=n,t[7]=0,t[8]=0,t[9]=-n,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function y(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=0,t[2]=-n,t[3]=0,t[4]=0,t[5]=1,t[6]=0,t[7]=0,t[8]=n,t[9]=0,t[10]=r,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function C(t,e){var n=Math.sin(e),r=Math.cos(e);return t[0]=r,t[1]=n,t[2]=0,t[3]=0,t[4]=-n,t[5]=r,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=1,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function F(t,e,n){var r=e[0],o=e[1],i=e[2],a=e[3],u=r+r,s=o+o,l=i+i,c=r*u,f=r*s,d=r*l,m=o*s,h=o*l,v=i*l,w=a*u,g=a*s,M=a*l;return t[0]=1-(m+v),t[1]=f+M,t[2]=d-g,t[3]=0,t[4]=f-M,t[5]=1-(c+v),t[6]=h+w,t[7]=0,t[8]=d+g,t[9]=h-w,t[10]=1-(c+m),t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function B(t,e){var n=new a(3),r=-e[0],o=-e[1],i=-e[2],u=e[3],s=e[4],l=e[5],c=e[6],f=e[7],d=r*r+o*o+i*i+u*u;return d>0?(n[0]=2*(s*u+f*r+l*i-c*o)/d,n[1]=2*(l*u+f*o+c*r-s*i)/d,n[2]=2*(c*u+f*i+s*o-l*r)/d):(n[0]=2*(s*u+f*r+l*i-c*o),n[1]=2*(l*u+f*o+c*r-s*i),n[2]=2*(c*u+f*i+s*o-l*r)),F(t,e,n),t}function D(t,e){return t[0]=e[12],t[1]=e[13],t[2]=e[14],t}function L(t,e){var n=e[0],r=e[1],o=e[2],i=e[4],a=e[5],u=e[6],s=e[8],l=e[9],c=e[10];return t[0]=Math.hypot(n,r,o),t[1]=Math.hypot(i,a,u),t[2]=Math.hypot(s,l,c),t}function S(t,e){var n=new a(3);L(n,e);var r=1/n[0],o=1/n[1],i=1/n[2],u=e[0]*r,s=e[1]*o,l=e[2]*i,c=e[4]*r,f=e[5]*o,d=e[6]*i,m=e[8]*r,h=e[9]*o,v=e[10]*i,w=u+f+v,g=0;return w>0?(g=2*Math.sqrt(w+1),t[3]=.25*g,t[0]=(d-h)/g,t[1]=(m-l)/g,t[2]=(s-c)/g):u>f&&u>v?(g=2*Math.sqrt(1+u-f-v),t[3]=(d-h)/g,t[0]=.25*g,t[1]=(s+c)/g,t[2]=(m+l)/g):f>v?(g=2*Math.sqrt(1+f-u-v),t[3]=(m-l)/g,t[0]=(s+c)/g,t[1]=.25*g,t[2]=(d+h)/g):(g=2*Math.sqrt(1+v-u-f),t[3]=(s-c)/g,t[0]=(m+l)/g,t[1]=(d+h)/g,t[2]=.25*g),t}function U(t,e,n,r){var o=e[0],i=e[1],a=e[2],u=e[3],s=o+o,l=i+i,c=a+a,f=o*s,d=o*l,m=o*c,h=i*l,v=i*c,w=a*c,g=u*s,M=u*l,x=u*c,p=r[0],R=r[1],b=r[2];return t[0]=(1-(h+w))*p,t[1]=(d+x)*p,t[2]=(m-M)*p,t[3]=0,t[4]=(d-x)*R,t[5]=(1-(f+w))*R,t[6]=(v+g)*R,t[7]=0,t[8]=(m+M)*b,t[9]=(v-g)*b,t[10]=(1-(f+h))*b,t[11]=0,t[12]=n[0],t[13]=n[1],t[14]=n[2],t[15]=1,t}function V(t,e,n,r,o){var i=e[0],a=e[1],u=e[2],s=e[3],l=i+i,c=a+a,f=u+u,d=i*l,m=i*c,h=i*f,v=a*c,w=a*f,g=u*f,M=s*l,x=s*c,p=s*f,R=r[0],b=r[1],P=r[2],A=o[0],T=o[1],E=o[2],_=(1-(v+g))*R,y=(m+p)*R,C=(h-x)*R,F=(m-p)*b,B=(1-(d+g))*b,D=(w+M)*b,L=(h+x)*P,S=(w-M)*P,U=(1-(d+v))*P;return t[0]=_,t[1]=y,t[2]=C,t[3]=0,t[4]=F,t[5]=B,t[6]=D,t[7]=0,t[8]=L,t[9]=S,t[10]=U,t[11]=0,t[12]=n[0]+A-(_*A+F*T+L*E),t[13]=n[1]+T-(y*A+B*T+S*E),t[14]=n[2]+E-(C*A+D*T+U*E),t[15]=1,t}function I(t,e){var n=e[0],r=e[1],o=e[2],i=e[3],a=n+n,u=r+r,s=o+o,l=n*a,c=r*a,f=r*u,d=o*a,m=o*u,h=o*s,v=i*a,w=i*u,g=i*s;return t[0]=1-f-h,t[1]=c+g,t[2]=d-w,t[3]=0,t[4]=c-g,t[5]=1-l-h,t[6]=m+v,t[7]=0,t[8]=d+w,t[9]=m-v,t[10]=1-l-f,t[11]=0,t[12]=0,t[13]=0,t[14]=0,t[15]=1,t}function N(t,e,n,r,o,i,a){var u=1/(n-e),s=1/(o-r),l=1/(i-a);return t[0]=2*i*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=2*i*s,t[6]=0,t[7]=0,t[8]=(n+e)*u,t[9]=(o+r)*s,t[10]=(a+i)*l,t[11]=-1,t[12]=0,t[13]=0,t[14]=a*i*2*l,t[15]=0,t}function Y(t,e,n,r,o){var i,a=1/Math.tan(e/2);return t[0]=a/n,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=a,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[11]=-1,t[12]=0,t[13]=0,t[15]=0,null!=o&&o!==1/0?(i=1/(r-o),t[10]=(o+r)*i,t[14]=2*o*r*i):(t[10]=-1,t[14]=-2*r),t}function O(t,e,n,r){var o=Math.tan(e.upDegrees*Math.PI/180),i=Math.tan(e.downDegrees*Math.PI/180),a=Math.tan(e.leftDegrees*Math.PI/180),u=Math.tan(e.rightDegrees*Math.PI/180),s=2/(a+u),l=2/(o+i);return t[0]=s,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=l,t[6]=0,t[7]=0,t[8]=-(a-u)*s*.5,t[9]=(o-i)*l*.5,t[10]=r/(n-r),t[11]=-1,t[12]=0,t[13]=0,t[14]=r*n/(n-r),t[15]=0,t}function j(t,e,n,r,o,i,a){var u=1/(e-n),s=1/(r-o),l=1/(i-a);return t[0]=-2*u,t[1]=0,t[2]=0,t[3]=0,t[4]=0,t[5]=-2*s,t[6]=0,t[7]=0,t[8]=0,t[9]=0,t[10]=2*l,t[11]=0,t[12]=(e+n)*u,t[13]=(o+r)*s,t[14]=(a+i)*l,t[15]=1,t}function z(t,e,n,r){var o,a,u,s,l,c,f,m,h,v,w=e[0],g=e[1],M=e[2],x=r[0],p=r[1],R=r[2],b=n[0],P=n[1],A=n[2];return Math.abs(w-b)<i&&Math.abs(g-P)<i&&Math.abs(M-A)<i?d(t):(f=w-b,m=g-P,h=M-A,o=p*(h*=v=1/Math.hypot(f,m,h))-R*(m*=v),a=R*(f*=v)-x*h,u=x*m-p*f,(v=Math.hypot(o,a,u))?(o*=v=1/v,a*=v,u*=v):(o=0,a=0,u=0),s=m*u-h*a,l=h*o-f*u,c=f*a-m*o,(v=Math.hypot(s,l,c))?(s*=v=1/v,l*=v,c*=v):(s=0,l=0,c=0),t[0]=o,t[1]=s,t[2]=f,t[3]=0,t[4]=a,t[5]=l,t[6]=m,t[7]=0,t[8]=u,t[9]=c,t[10]=h,t[11]=0,t[12]=-(o*w+a*g+u*M),t[13]=-(s*w+l*g+c*M),t[14]=-(f*w+m*g+h*M),t[15]=1,t)}function W(t,e,n,r){var o=e[0],i=e[1],a=e[2],u=r[0],s=r[1],l=r[2],c=o-n[0],f=i-n[1],d=a-n[2],m=c*c+f*f+d*d;m>0&&(c*=m=1/Math.sqrt(m),f*=m,d*=m);var h=s*d-l*f,v=l*c-u*d,w=u*f-s*c;return(m=h*h+v*v+w*w)>0&&(h*=m=1/Math.sqrt(m),v*=m,w*=m),t[0]=h,t[1]=v,t[2]=w,t[3]=0,t[4]=f*w-d*v,t[5]=d*h-c*w,t[6]=c*v-f*h,t[7]=0,t[8]=c,t[9]=f,t[10]=d,t[11]=0,t[12]=o,t[13]=i,t[14]=a,t[15]=1,t}function X(t){return"mat4("+t[0]+", "+t[1]+", "+t[2]+", "+t[3]+", "+t[4]+", "+t[5]+", "+t[6]+", "+t[7]+", "+t[8]+", "+t[9]+", "+t[10]+", "+t[11]+", "+t[12]+", "+t[13]+", "+t[14]+", "+t[15]+")"}function q(t){return Math.hypot(t[0],t[1],t[3],t[4],t[5],t[6],t[7],t[8],t[9],t[10],t[11],t[12],t[13],t[14],t[15])}function k(t,e,n){return t[0]=e[0]+n[0],t[1]=e[1]+n[1],t[2]=e[2]+n[2],t[3]=e[3]+n[3],t[4]=e[4]+n[4],t[5]=e[5]+n[5],t[6]=e[6]+n[6],t[7]=e[7]+n[7],t[8]=e[8]+n[8],t[9]=e[9]+n[9],t[10]=e[10]+n[10],t[11]=e[11]+n[11],t[12]=e[12]+n[12],t[13]=e[13]+n[13],t[14]=e[14]+n[14],t[15]=e[15]+n[15],t}function H(t,e,n){return t[0]=e[0]-n[0],t[1]=e[1]-n[1],t[2]=e[2]-n[2],t[3]=e[3]-n[3],t[4]=e[4]-n[4],t[5]=e[5]-n[5],t[6]=e[6]-n[6],t[7]=e[7]-n[7],t[8]=e[8]-n[8],t[9]=e[9]-n[9],t[10]=e[10]-n[10],t[11]=e[11]-n[11],t[12]=e[12]-n[12],t[13]=e[13]-n[13],t[14]=e[14]-n[14],t[15]=e[15]-n[15],t}function Z(t,e,n){return t[0]=e[0]*n,t[1]=e[1]*n,t[2]=e[2]*n,t[3]=e[3]*n,t[4]=e[4]*n,t[5]=e[5]*n,t[6]=e[6]*n,t[7]=e[7]*n,t[8]=e[8]*n,t[9]=e[9]*n,t[10]=e[10]*n,t[11]=e[11]*n,t[12]=e[12]*n,t[13]=e[13]*n,t[14]=e[14]*n,t[15]=e[15]*n,t}function G(t,e,n,r){return t[0]=e[0]+n[0]*r,t[1]=e[1]+n[1]*r,t[2]=e[2]+n[2]*r,t[3]=e[3]+n[3]*r,t[4]=e[4]+n[4]*r,t[5]=e[5]+n[5]*r,t[6]=e[6]+n[6]*r,t[7]=e[7]+n[7]*r,t[8]=e[8]+n[8]*r,t[9]=e[9]+n[9]*r,t[10]=e[10]+n[10]*r,t[11]=e[11]+n[11]*r,t[12]=e[12]+n[12]*r,t[13]=e[13]+n[13]*r,t[14]=e[14]+n[14]*r,t[15]=e[15]+n[15]*r,t}function K(t,e){return t[0]===e[0]&&t[1]===e[1]&&t[2]===e[2]&&t[3]===e[3]&&t[4]===e[4]&&t[5]===e[5]&&t[6]===e[6]&&t[7]===e[7]&&t[8]===e[8]&&t[9]===e[9]&&t[10]===e[10]&&t[11]===e[11]&&t[12]===e[12]&&t[13]===e[13]&&t[14]===e[14]&&t[15]===e[15]}function Q(t,e){var n=t[0],r=t[1],o=t[2],a=t[3],u=t[4],s=t[5],l=t[6],c=t[7],f=t[8],d=t[9],m=t[10],h=t[11],v=t[12],w=t[13],g=t[14],M=t[15],x=e[0],p=e[1],R=e[2],b=e[3],P=e[4],A=e[5],T=e[6],E=e[7],_=e[8],y=e[9],C=e[10],F=e[11],B=e[12],D=e[13],L=e[14],S=e[15];return Math.abs(n-x)<=i*Math.max(1,Math.abs(n),Math.abs(x))&&Math.abs(r-p)<=i*Math.max(1,Math.abs(r),Math.abs(p))&&Math.abs(o-R)<=i*Math.max(1,Math.abs(o),Math.abs(R))&&Math.abs(a-b)<=i*Math.max(1,Math.abs(a),Math.abs(b))&&Math.abs(u-P)<=i*Math.max(1,Math.abs(u),Math.abs(P))&&Math.abs(s-A)<=i*Math.max(1,Math.abs(s),Math.abs(A))&&Math.abs(l-T)<=i*Math.max(1,Math.abs(l),Math.abs(T))&&Math.abs(c-E)<=i*Math.max(1,Math.abs(c),Math.abs(E))&&Math.abs(f-_)<=i*Math.max(1,Math.abs(f),Math.abs(_))&&Math.abs(d-y)<=i*Math.max(1,Math.abs(d),Math.abs(y))&&Math.abs(m-C)<=i*Math.max(1,Math.abs(m),Math.abs(C))&&Math.abs(h-F)<=i*Math.max(1,Math.abs(h),Math.abs(F))&&Math.abs(v-B)<=i*Math.max(1,Math.abs(v),Math.abs(B))&&Math.abs(w-D)<=i*Math.max(1,Math.abs(w),Math.abs(D))&&Math.abs(g-L)<=i*Math.max(1,Math.abs(g),Math.abs(L))&&Math.abs(M-S)<=i*Math.max(1,Math.abs(M),Math.abs(S))}Math.hypot||(Math.hypot=function(){for(var t=0,e=arguments.length;e--;)t+=arguments[e]*arguments[e];return Math.sqrt(t)});var J=g,$=H;const tt={rotationBuffers:[],scaleBuffers:[],translationBuffers:[]};var et=n(0);function nt(t,e,n,o,i,a=null,u){const s=null!==t.viewPosition?t.viewPosition:[0,0,t.worldCameraPosition[2]/1.5],l=t.viewTarget,c=r.lookAt(r.create(),s,l,[0,1,0]),f=r.create();null!==a&&r.multiply(c,a,c);const d=[1,1,1],m=[-1,-.5,0],h=[.5,.75,.25],v=r.create();if(o.length>0){let a=0;for(const s of o){const o=Object(et.stringify)(s).split("").filter((t,e,n)=>1-e%8>0).map(t=>t.charCodeAt(0)).join("").substr(-64),l=s.program?s.program(e):n;e.useProgram(l);const w={program:l,attribLocations:{vertexNormal:e.getAttribLocation(l,"aVertexNormal"),vertexPosition:e.getAttribLocation(l,"aVertexPosition"),vertexColor:e.getAttribLocation(l,"aVertexColor")},uniformLocations:{modelViewMatrix:e.getUniformLocation(l,"uModelViewMatrix"),projectionMatrix:e.getUniformLocation(l,"uProjectionMatrix"),worldMatrix:e.getUniformLocation(l,"uWorldMatrix"),lightDirection:e.getUniformLocation(l,"uLightDirection"),lightDiffuse:e.getUniformLocation(l,"uLightDiffuse"),materialDiffuse:e.getUniformLocation(l,"uMaterialDiffuse"),normalMatrix:e.getUniformLocation(l,"uNormalMatrix"),textureLocation:e.getUniformLocation(l,"uTexture"),worldCameraPositionLocation:e.getUniformLocation(l,"uWorldCameraPosition")}};{const t=3,n=e.FLOAT,r=!1,o=0,i=0;e.enableVertexAttribArray(w.attribLocations.vertexPosition),e.bindBuffer(e.ARRAY_BUFFER,s.position),e.vertexAttribPointer(w.attribLocations.vertexPosition,t,n,r,o,i)}{const t=4,n=e.FLOAT,r=!1,o=0,i=0;e.enableVertexAttribArray(w.attribLocations.vertexColor),e.bindBuffer(e.ARRAY_BUFFER,s.color),e.vertexAttribPointer(w.attribLocations.vertexColor,t,n,r,o,i),e.enableVertexAttribArray(w.attribLocations.vertexColor)}{const t=3,n=e.FLOAT,r=!1,o=0,i=0;e.enableVertexAttribArray(w.attribLocations.vertexNormal),e.bindBuffer(e.ARRAY_BUFFER,s.normal),e.vertexAttribPointer(w.attribLocations.vertexNormal,t,n,r,o,i)}s.translation&&3===s.translation.length&&(o in tt.translationBuffers||(tt.translationBuffers[o]={modelXRotationRadians:0,modelYRotationRadians:0,modelZRotationRadians:0}),tt.translationBuffers[o].modelXTranslation=s.translation[0],tt.translationBuffers[o].modelYTranslation=s.translation[1],tt.translationBuffers[o].modelZTranslation=s.translation[2],r.translate(f,f,[-tt.translationBuffers[o].modelXTranslation,tt.translationBuffers[o].modelYTranslation,tt.translationBuffers[o].modelZTranslation])),s.rotation&&3===s.rotation.length?(o in tt.rotationBuffers||(tt.rotationBuffers[o]={modelXRotationRadians:0,modelYRotationRadians:0,modelZRotationRadians:0}),tt.rotationBuffers[o].modelXRotationRadians=u*s.rotation[0]+tt.rotationBuffers[o].modelXRotationRadians,tt.rotationBuffers[o].modelYRotationRadians=u*s.rotation[1]+tt.rotationBuffers[o].modelYRotationRadians,tt.rotationBuffers[o].modelZRotationRadians=u*s.rotation[2]+tt.rotationBuffers[o].modelZRotationRadians,r.rotateX(f,f,tt.rotationBuffers[o].modelXRotationRadians),r.rotateY(f,f,tt.rotationBuffers[o].modelYRotationRadians),r.rotateZ(f,f,tt.rotationBuffers[o].modelZRotationRadians)):s.length>1&&0===a&&r.rotateZ(f,f,Math.PI/2),r.invert(v,v),r.transpose(v,v),e.uniformMatrix4fv(w.uniformLocations.modelViewMatrix,!1,c),e.uniformMatrix4fv(w.uniformLocations.projectionMatrix,!1,i),e.uniformMatrix4fv(w.uniformLocations.worldMatrix,!1,f),e.uniform3fv(w.uniformLocations.lightDirection,m),e.uniform3fv(w.uniformLocations.lightDiffuse,d),e.uniform3fv(w.uniformLocations.materialDiffuse,h),e.uniformMatrix4fv(w.uniformLocations.normalMatrix,!1,v),e.uniform3fv(w.uniformLocations.worldCameraPositionLocation,t.worldCameraPosition),e.uniform1i(w.uniformLocations.textureLocation,0),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,s.index),e.drawElements(e.TRIANGLES,s.indexSize,e.UNSIGNED_SHORT,0),e.bindBuffer(e.ARRAY_BUFFER,null),e.bindBuffer(e.ELEMENT_ARRAY_BUFFER,null)}}}const rt={buffers:[],inVR:!1,vrDisplay:null,viewPosition:[0,0,5],viewTarget:[0,0,0],worldCameraPosition:[0,0,5]};let ot=0,it=0;function at(t={canvas:window.document.createElement("canvas"),viewPosition:rt.viewPosition,viewTarget:rt.viewTarget,worldCameraPosition:rt.worldCameraPosition},e,n){const o=t.canvas,i=o.getContext("webgl2")||o.getContext("experimental-webgl");if(!i)return void window.alert("Unable to initialize WebGL. Your browser or machine may not support it.");const a=n(i);e.forEach(t=>rt.buffers.push(t(i))),rt.viewPosition=t.viewPosition||rt.viewPosition,rt.viewTarget=t.viewTarget||rt.viewTarget,rt.worldCameraPosition=t.worldCameraPosition||rt.worldCameraPosition;let u=0;i.clearColor(1,1,1,1);const s=t=>{if(!rt.inVR){const e=(t*=.001)-u;u=t,function(t,e,n,o,i){e.viewport(0,0,t.width,t.height),e.enable(e.CULL_FACE),e.enable(e.DEPTH_TEST),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),e.depthFunc(e.LEQUAL),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT);const a=45*Math.PI/180,u=t.width/t.height,s=r.perspective(r.create(),a,u,1,2e3);nt(rt,e,n,o,s,null,i)}(o,i,a,rt.buffers,e),window.requestAnimationFrame(s)}},l=t=>{if(null==rt.vrDisplay||!rt.inVR)return;rt.vrDisplay.requestAnimationFrame(l);const e=(t*=.001)-u;u=t,function(t,e,n,r,o){e.viewport(0,0,t.width,t.height),e.enable(e.CULL_FACE),e.enable(e.DEPTH_TEST),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT),e.depthFunc(e.LEQUAL),lt(t,e,n,r,!0,o),lt(t,e,n,r,!1,o),rt.vrDisplay.submitFrame()}(o,i,a,rt.buffers,e)};return function(t,e,n,r,o,i){if("function"!=typeof navigator.getVRDisplays)return void console.error("Your browser does not support WebVR");navigator.getVRDisplays().then(t=>{null!==t&&t.length>0&&(rt.vrDisplay=t[t.length-1],rt.vrDisplay.depthNear=.1,rt.vrDisplay.depthFar=100)}),window.addEventListener("vrdisplaypresentchange",()=>{if(null!=rt.vrDisplay&&rt.vrDisplay.isPresenting){const e=rt.vrDisplay.getEyeParameters("left");t.width=2*e.renderWidth,t.height=e.renderHeight,rt.vrDisplay.requestAnimationFrame(i)}else null!==rt.vrDisplay&&(console.log("Exit VR"),rt.inVR=!1,t.width=640,t.height=480,window.requestAnimationFrame(o))})}(o,0,0,rt.buffers,s,l),window.requestAnimationFrame(s),window.vrButton=document.createElement("button"),window.vrButton.innerHTML="Enter VR",window.vrButton.onclick=function(){console.log("Enter VR"),null!=rt.vrDisplay&&(rt.inVR=!0,rt.vrDisplay.requestPresent([{source:o}]))},window.vrButton.style="position: absolute; bottom: 20px; right:50px;",window.document.body.append(window.vrButton),{gl:i,updateContext:ut}}function ut(t,e){for(const n in e){if("buffers"===n&&e.buffers.length>0){rt.buffers=[];for(const n of e.buffers)rt.buffers.push(n(t))}if("viewTarget"===n&&Array.isArray(e.viewTarget)){e.viewTarget.forEach((t,e,n)=>rt.viewTarget[e]=t)}if("viewPosition"===n&&Array.isArray(e.viewPosition)){const t=e.viewPosition;if("cameraDelta"in e&&Array.isArray(e.cameraDelta)){e.cameraDelta.forEach((e,n,r)=>{t[n]?Math.abs(rt.viewPosition[n]-rt.viewTarget[n])>Math.abs(t[n]-rt.viewTarget[n])?rt.viewPosition[n]=rt.viewPosition[n]+e:rt.viewPosition[n]=t[n]:rt.viewPosition[n]=rt.viewPosition[n]+e}),st()}else t.forEach((t,e,n)=>rt.viewPosition[e]=t),st()}else"viewPosition"===n&&(rt.viewPosition=e.viewPosition,st());if("worldCameraPosition"===n&&Array.isArray(e.worldCameraPosition)){const t=e.worldCameraPosition;if("cameraDelta"in e&&Array.isArray(e.cameraDelta)){e.cameraDelta.forEach((e,n,r)=>{t[n]?rt.worldCameraPosition[n]<t[n]?rt.worldCameraPosition[n]=rt.worldCameraPosition[n]+e:rt.worldCameraPosition[n]=t[n]:rt.worldCameraPosition[n]=rt.worldCameraPosition[n]+e}),st()}else t.forEach((t,e,n)=>rt.worldCameraPosition[e]=t)}if("viewOrbitDelta"===n&&Array.isArray(e.viewOrbitDelta)){const t=e.viewOrbitDelta;if(0!==t[0]&&0!==t[1]){const e=t[0]>0?3*Math.PI/180:t[0]<0?-3*Math.PI/180:0,n=t[1]>0?3*Math.PI/180:t[1]<0?-3*Math.PI/180:0,r=1e6*(rt.viewPosition[0]-rt.viewTarget[0]),o=1e6*(rt.viewPosition[1]-rt.viewTarget[1]),i=1e6*(rt.viewPosition[2]-rt.viewTarget[2]),a=Math.sqrt(Math.pow(r,2)+Math.pow(o,2)+Math.pow(i,2));ot=ot+e<2*-Math.PI?2*Math.PI+(ot+e):2*Math.PI<ot+e?ot+e-2*Math.PI:ot+e,it=it+n<2*-Math.PI?2*Math.PI+(it+n):2*Math.PI<it+n?it+n-2*Math.PI:it+n,a==a&&ot==ot&&it==it&&(rt.viewPosition[0]=rt.viewTarget[0]+Math.cos(ot)*(a/1e6),rt.viewPosition[2]=rt.viewTarget[2]+Math.sin(ot)*(a/1e6))}}}}function st(){const t=1e6*(rt.viewPosition[0]-rt.viewTarget[0]),e=1e6*(rt.viewPosition[1]-rt.viewTarget[1]),n=1e6*(rt.viewPosition[2]-rt.viewTarget[2]),r=Math.sqrt(Math.pow(t,2)+Math.pow(e,2)+Math.pow(n,2));ot=Math.acos(1>t/r||t/r<-1?t/r:Math.round(t/r))}function lt(t,e,n,r,o,i){t.width;let a,u,s=t.width/2,l=t.height,c=new VRFrameData;rt.vrDisplay.getFrameData(c),o?(e.viewport(0,0,s,l),a=c.leftProjectionMatrix,u=c.leftViewMatrix):(e.viewport(s,0,s,l),a=c.rightProjectionMatrix,u=c.rightViewMatrix),nt(rt,e,n,r,a,u,i)}function ct(t){const e=ft(t,t.VERTEX_SHADER,"#version 300 es\nprecision mediump float;\n\nin vec4 aVertexColor;\nin vec3 aVertexNormal;\nin vec3 aVertexPosition;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uNormalMatrix;\nuniform vec3 uLightDirection;\nuniform vec3 uLightDiffuse;\nuniform vec3 uMaterialDiffuse;\nuniform mat4 uProjectionMatrix;\nuniform mat4 uWorldMatrix;\n\nout vec3 v_normal;\nout vec3 v_worldNormal;\nout vec3 v_worldPosition;\n\nout lowp vec4 vVertexColor;\n\nvoid main() {\n  \n  vVertexColor = aVertexColor;\n  \n  // gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0); // vec4 aVertexPosition\n  \n  // Calculate the normal vector\n  // vec3 N = normalize(vec3(uNormalMatrix * vec4(aVertexNormal, 1.0)));\n\n  // Normalized light direction\n  // vec3 L = normalize(uLightDirection);\n\n  // Dot product of the normal product and negative light direction vector\n  // float lambertTerm = dot(N, -L);\n\n  // Calculating the diffuse color based on the Lambertian reflection model\n  // vec3 Id = uMaterialDiffuse * uLightDiffuse * lambertTerm;\n  // vec3 Id = aVertexColor.rgb * uLightDiffuse * lambertTerm;\n\n  // Set the varying to be used inside of the fragment shader\n  // vVertexColor = vec4(Id, 1.0);\n\n  // Setting the vertex position\n  // gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\n  // Pass a normal. Since the positions\n  // centered around the origin we can just \n  // pass the position\n  // v_normal = normalize(aVertexPosition);\n  \n  // Multiply the position by the matrix.\n  gl_Position = uProjectionMatrix * uModelViewMatrix * uWorldMatrix * vec4(aVertexPosition, 1.0);\n   \n  // send the view position to the fragment shader\n  v_worldPosition = (uWorldMatrix * vec4(aVertexPosition, 1.0)).xyz;\n \n  // orient the normals and pass to the fragment shader\n  v_worldNormal = mat3(uWorldMatrix) * aVertexNormal;\n}\n"),n=ft(t,t.FRAGMENT_SHADER,"#version 300 es\nprecision mediump float;\n\n// The texture.\nuniform samplerCube uTexture;\n\n// The position of the camera\nuniform vec3 uWorldCameraPosition;\n\n// Passed in from the vertex shader.\nin vec3 v_normal;\nin vec3 v_worldNormal;\nin vec3 v_worldPosition;\n\nin mediump vec4 vVertexColor;\n\nout mediump vec4 fragColor;\n\nvoid main() {\n  fragColor = vVertexColor;\n  // fragColor = textureCube(uTexture, normalize(v_normal));\n  \n  // vec3 worldNormal = normalize(v_worldNormal);\n  // vec3 eyeToSurfaceDir = normalize(v_worldPosition - uWorldCameraPosition);\n  // vec3 direction = reflect(eyeToSurfaceDir, worldNormal);\n  //\n  // fragColor = texture(uTexture, direction);\n  // fragColor = texture(uTexture, v_worldPosition);\n}\n"),r=t.createProgram();return t.attachShader(r,e),t.attachShader(r,n),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS)?r:(window.alert("Unable to initialize the shader program: "+t.getProgramInfoLog(r)),null)}function ft(t,e,n){const r=t.createShader(e);return t.shaderSource(r,n),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS)?r:(window.alert("An error occurred compiling the shaders: "+t.getShaderInfoLog(r)),t.deleteShader(r),null)}function dt(t){const e=t.createBuffer(),n=[-8.392287,-1,-1.570847,-8.392287,1,-1.570847,-7.96828,-1,-3.525385,-7.96828,1,-3.525385,-6.437749,-1,-1.14684,-6.437749,1,-1.14684,-6.013742,-1,-3.101378,-6.013742,1,-3.101378],r=t.createBuffer(),o=[1,2,0,3,6,2,7,4,6,5,0,4,6,0,2,3,5,7,1,3,2,3,7,6,7,5,4,5,1,0,6,4,0,3,1,5],i=t.createBuffer(),a=[-1,-1,-1,-1,1,-1,1,1,-1,1,-1,-1,-1,-1,1,1,-1,1,1,1,1,-1,1,1],u=t.createBuffer(),s=[0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1];return t.bindBuffer(t.ARRAY_BUFFER,e),t.bufferData(t.ARRAY_BUFFER,new Float32Array(n),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,new Float32Array(a),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,u),t.bufferData(t.ARRAY_BUFFER,new Float32Array(s),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(o),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),{position:e,positionSize:n.length,normal:i,normalSize:a.length,index:r,indexSize:o.length,color:u,colorSize:s.length,rotation:[0,0,0],scale:[1,1,1],translation:[-7.5,0,5]}}function mt(t){const e=ht(t,t.VERTEX_SHADER,"#version 300 es\nprecision mediump float;\n\nin vec4 aVertexColor;\nin vec3 aVertexNormal;\nin vec3 aVertexPosition;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat4 uWorldMatrix;\n\nuniform vec3 uLightDirection;\nuniform vec3 uLightDiffuse;\nuniform vec3 uMaterialDiffuse;\nuniform mat4 uNormalMatrix;\n\nout vec3 v_normal;\nout vec3 v_worldNormal;\nout vec3 v_worldPosition;\n\nout lowp vec4 vVertexColor;\n\nvoid main() {\n  \n  vVertexColor = aVertexColor;\n  \n  // gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0); // vec4 aVertexPosition\n  \n  // Calculate the normal vector\n  // vec3 N = normalize(vec3(uNormalMatrix * vec4(aVertexNormal, 1.0)));\n\n  // Normalized light direction\n  // vec3 L = normalize(uLightDirection);\n\n  // Dot product of the normal product and negative light direction vector\n  // float lambertTerm = dot(N, -L);\n\n  // Calculating the diffuse color based on the Lambertian reflection model\n  // vec3 Id = uMaterialDiffuse * uLightDiffuse * lambertTerm;\n  // vec3 Id = aVertexColor.rgb * uLightDiffuse * lambertTerm;\n\n  // Set the varying to be used inside of the fragment shader\n  // vVertexColor = vec4(Id, 1.0);\n\n  // Setting the vertex position\n  // gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\n  // Pass a normal. Since the positions\n  // centered around the origin we can just \n  // pass the position\n  // v_normal = normalize(aVertexPosition);\n  \n  // Multiply the position by the matrix.\n  gl_Position = uProjectionMatrix * uModelViewMatrix * uWorldMatrix * vec4(aVertexPosition, 1.0);\n   \n  // send the view position to the fragment shader\n  v_worldPosition = (uWorldMatrix * vec4(aVertexPosition, 1.0)).xyz;\n \n  // orient the normals and pass to the fragment shader\n  v_worldNormal = mat3(uWorldMatrix) * aVertexNormal;\n}\n"),n=ht(t,t.FRAGMENT_SHADER,"#version 300 es\nprecision mediump float;\n\n// The texture.\nuniform samplerCube uTexture;\n\n// The position of the camera\nuniform vec3 uWorldCameraPosition;\n\n// Passed in from the vertex shader.\nin vec3 v_worldPosition;\n\nout mediump vec4 fragColor;\n\nvoid main() {\n  fragColor = texture(uTexture, v_worldPosition);\n}\n"),r=t.createProgram();return t.attachShader(r,e),t.attachShader(r,n),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS)?r:(window.alert("Unable to initialize the shader program: "+t.getProgramInfoLog(r)),null)}function ht(t,e,n){const r=t.createShader(e);return t.shaderSource(r,n),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS)?r:(window.alert("An error occurred compiling the shaders: "+t.getShaderInfoLog(r)),t.deleteShader(r),null)}function vt(t){const e=t.createBuffer(),n=[-.5,-.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,-.5,-.5,-.5,.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,.5,.5,-.5,.5,.5,.5,.5,-.5,.5,-.5,-.5,.5,.5,.5,.5,-.5,-.5,.5,.5,.5,.5,.5,.5,.5,-.5,-.5,-.5,-.5,.5,-.5,-.5,-.5,-.5,.5,-.5,-.5,.5,.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,-.5,-.5,.5,-.5,.5,-.5,-.5,-.5,.5,-.5,.5,.5,-.5,.5,-.5,.5,-.5,-.5,.5,.5,-.5,.5,-.5,.5,.5,-.5,.5,.5,.5,-.5,.5,.5,.5],r=t.createBuffer(),o=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35];var i=t.createBuffer();const a=[-1,1,-1,-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,1,-1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,1,1,1,1,-1,1,-1,1,-1,-1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,1,-1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,1,-1,1,1,1,-1,1,-1,1,1,1,1],u=t.createBuffer(),s=[0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1];return t.bindBuffer(t.ARRAY_BUFFER,e),t.bufferData(t.ARRAY_BUFFER,new Float32Array(n),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,new Float32Array(a),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,u),t.bufferData(t.ARRAY_BUFFER,new Float32Array(s),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(o),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),{program:mt,position:e,positionSize:n.length,normal:i,normalSize:a.length,index:r,indexSize:o.length,color:u,colorSize:s.length,rotation:[.4,.7,0],scale:[1,1,1],translation:[0,0,0]}}function wt(t){const e=gt(t,t.VERTEX_SHADER,"#version 300 es\nprecision mediump float;\n\nin vec4 aVertexColor;\nin vec3 aVertexNormal;\nin vec3 aVertexPosition;\n\nuniform mat4 uModelViewMatrix;\nuniform mat4 uProjectionMatrix;\nuniform mat4 uWorldMatrix;\n\nuniform vec3 uLightDirection;\nuniform vec3 uLightDiffuse;\nuniform vec3 uMaterialDiffuse;\nuniform mat4 uNormalMatrix;\n\nout vec3 v_normal;\nout vec3 v_worldNormal;\nout vec3 v_worldPosition;\n\nout lowp vec4 vVertexColor;\n\nvoid main() {\n  \n  vVertexColor = aVertexColor;\n  \n  // gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0); // vec4 aVertexPosition\n  \n  // Calculate the normal vector\n  // vec3 N = normalize(vec3(uNormalMatrix * vec4(aVertexNormal, 1.0)));\n\n  // Normalized light direction\n  // vec3 L = normalize(uLightDirection);\n\n  // Dot product of the normal product and negative light direction vector\n  // float lambertTerm = dot(N, -L);\n\n  // Calculating the diffuse color based on the Lambertian reflection model\n  // vec3 Id = uMaterialDiffuse * uLightDiffuse * lambertTerm;\n  // vec3 Id = aVertexColor.rgb * uLightDiffuse * lambertTerm;\n\n  // Set the varying to be used inside of the fragment shader\n  // vVertexColor = vec4(Id, 1.0);\n\n  // Setting the vertex position\n  // gl_Position = uProjectionMatrix * uModelViewMatrix * vec4(aVertexPosition, 1.0);\n\n  // Pass a normal. Since the positions\n  // centered around the origin we can just \n  // pass the position\n  // v_normal = normalize(aVertexPosition);\n  \n  // Multiply the position by the matrix.\n  gl_Position = uProjectionMatrix * uModelViewMatrix * uWorldMatrix * vec4(aVertexPosition, 1.0);\n   \n  // send the view position to the fragment shader\n  v_worldPosition = (uWorldMatrix * vec4(aVertexPosition, 1.0)).xyz;\n \n  // orient the normals and pass to the fragment shader\n  v_worldNormal = mat3(uWorldMatrix) * aVertexNormal;\n}\n"),n=gt(t,t.FRAGMENT_SHADER,"#version 300 es\nprecision mediump float;\n\n// The texture.\nuniform samplerCube uTexture;\n\n// The position of the camera\nuniform vec3 uWorldCameraPosition;\n\n// Passed in from the vertex shader.\nin vec3 v_normal;\nin vec3 v_worldNormal;\nin vec3 v_worldPosition;\n\nin mediump vec4 vVertexColor;\n\nout mediump vec4 fragColor;\n\nvoid main() {\n  // fragColor = vVertexColor;\n  // fragColor = textureCube(uTexture, normalize(v_normal));\n  \n  vec3 worldNormal = normalize(v_worldNormal);\n  vec3 eyeToSurfaceDir = normalize(uWorldCameraPosition - v_worldPosition);\n  vec3 direction = reflect(eyeToSurfaceDir, worldNormal);\n \n  fragColor = texture(uTexture, direction);\n  // fragColor = texture(uTexture, v_worldPosition);\n}\n"),r=t.createProgram();return t.attachShader(r,e),t.attachShader(r,n),t.linkProgram(r),t.getProgramParameter(r,t.LINK_STATUS)?r:(window.alert("Unable to initialize the shader program: "+t.getProgramInfoLog(r)),null)}function gt(t,e,n){const r=t.createShader(e);return t.shaderSource(r,n),t.compileShader(r),t.getShaderParameter(r,t.COMPILE_STATUS)?r:(window.alert("An error occurred compiling the shaders: "+t.getShaderInfoLog(r)),t.deleteShader(r),null)}function Mt(t){const e=t.createBuffer(),n=[-50,50,-50,-50,-50,-50,50,-50,-50,50,50,-50,-50,50,-50,50,-50,-50,-50,50,50,-50,50,-50,50,50,-50,50,50,50,-50,50,50,50,50,-50,50,-50,-50,-50,-50,-50,-50,-50,50,50,-50,-50,-50,-50,50,50,-50,50,-50,-50,50,-50,-50,-50,-50,50,-50,-50,50,50,-50,-50,50,-50,50,-50,50,50,-50,50,-50,-50,50,-50,50,50,50,-50,50,-50,50,50,50,50,50,-50,50,-50,-50,50,-50,50,50,50,-50,50,-50,50,50,50,50,50],r=t.createBuffer(),o=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35];var i=t.createBuffer();const a=[-1,1,-1,-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,1,-1,-1,-1,1,1,-1,1,-1,1,1,-1,1,1,1,-1,1,1,1,1,-1,1,-1,-1,-1,-1,-1,-1,-1,1,1,-1,-1,-1,-1,1,1,-1,1,-1,-1,1,-1,-1,-1,-1,1,-1,-1,1,1,-1,-1,1,-1,1,-1,1,1,-1,1,-1,-1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1,-1,1,-1,-1,1,-1,1,1,1,-1,1,-1,1,1,1,1,1],u=t.createBuffer(),s=[0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1,0,0,1,1,0,1,0,1,0,0,1,1,1,0,0,1];return t.bindBuffer(t.ARRAY_BUFFER,e),t.bufferData(t.ARRAY_BUFFER,new Float32Array(n),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,i),t.bufferData(t.ARRAY_BUFFER,new Float32Array(a),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,u),t.bufferData(t.ARRAY_BUFFER,new Float32Array(s),t.STATIC_DRAW),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,r),t.bufferData(t.ELEMENT_ARRAY_BUFFER,new Uint16Array(o),t.STATIC_DRAW),t.bindBuffer(t.ARRAY_BUFFER,null),t.bindBuffer(t.ELEMENT_ARRAY_BUFFER,null),{program:wt,position:e,positionSize:n.length,normal:i,normalSize:a.length,index:r,indexSize:o.length,color:u,colorSize:s.length,rotation:[0,0,0],scale:[50,50,50],translation:[0,0,0]}}const xt=null!==window.document.querySelector("canvas#cv")?window.document.querySelector("canvas#cv"):window.document.createElement("canvas");!function(){"cv"!==xt.id&&(xt.id="cv",xt.width=window.innerWidth,xt.height=window.innerHeight,xt.style.display="block",xt.style.margin="auto",xt.style.width=window.outerWidth+"px",.99*window.outerWidth*xt.height/xt.width<window.innerHeight?xt.style.height=window.outerWidth*xt.height/xt.width+"px":(xt.style.height=.99*window.outerHeight+"px",xt.style.width=window.outerHeight*xt.width/xt.height+"px"),window.document.body.append(xt)),window.document.body.style.backgroundColor="#000000",window.document.body.style.margin="0px",window.document.body.style.overflow="hidden";let t=!1,e=xt.width/2,n=xt.height/2;const r=document.createElement("canvas").getContext("2d");r.canvas.width=128,r.canvas.height=128;let i={current:0,changeCamera:function(t){u(a,this.viewPoints[this.current])},viewPoints:[{viewPosition:[.25,0,25],viewTarget:[0,0,0]},{viewPosition:[.5,0,2.5],viewTarget:[0,0,0]}]};const{gl:a,updateContext:u}=at({canvas:xt,viewPosition:i.viewPoints[0].viewPosition,viewTarget:i.viewPoints[0].viewTarget},[Mt,dt],ct);!function(t){window.onkeydown=function(e){switch(e.keyCode){case 49:o(t,0,0,0,1);break;case 50:o(t,.2,.8,.2,1);break;case 51:o(t,.2,.2,.8,1);break;case 52:o(t,Math.random(),Math.random(),Math.random(),1)}}}(a);const s=a.createTexture();a.bindTexture(a.TEXTURE_CUBE_MAP,s);let l=0,c=null,f=(new Date).getTime();window.userTriggered=!1,[{target:a.TEXTURE_CUBE_MAP_POSITIVE_X,faceColor:"#F00",textColor:"#0FF",text:"+X"},{target:a.TEXTURE_CUBE_MAP_NEGATIVE_X,faceColor:"#FF0",textColor:"#00F",text:"-X"},{target:a.TEXTURE_CUBE_MAP_POSITIVE_Y,faceColor:"#0F0",textColor:"#F0F",text:"+Y"},{target:a.TEXTURE_CUBE_MAP_NEGATIVE_Y,faceColor:"#0FF",textColor:"#F00",text:"-Y"},{target:a.TEXTURE_CUBE_MAP_POSITIVE_Z,faceColor:"#00F",textColor:"#FF0",text:"+Z"},{target:a.TEXTURE_CUBE_MAP_NEGATIVE_Z,faceColor:"#F0F",textColor:"#0F0",text:"-Z"}].forEach((t,e,n)=>{const{target:o,faceColor:i,textColor:u,text:l}=t,c=new Image;c.crossOrigin="",c.id=""+(e+1),function(t,e,n){t.strokeStyle=e;const r=t.canvas.width,o=t.canvas.height;t.beginPath();for(let e=n/2;e<=r;e+=n)t.save(),t.translate(.5,0),t.moveTo(e-.5,0),t.lineTo(e-.5,o),t.restore();for(let e=n/2;e<=o;e+=n)t.save(),t.translate(0,.5),t.moveTo(0,e-.5),t.lineTo(r,e-.5),t.restore();t.stroke()}(r,i,16);const f=a.RGBA,d=a.RGBA,m=a.UNSIGNED_BYTE;c.style.margin="auto",c.style.position="fixed",c.style.top="0px",c.style.left=e*r.canvas.width+"px",c.addEventListener("load",(function(){a.bindTexture(a.TEXTURE_CUBE_MAP,s),a.texImage2D(o,0,f,d,m,c),a.generateMipmap(a.TEXTURE_CUBE_MAP)})),r.canvas.toBlob(t=>{c.src=URL.createObjectURL(t)}),a.texImage2D(o,0,f,512,512,0,d,m,null)}),a.generateMipmap(a.TEXTURE_CUBE_MAP),a.texParameteri(a.TEXTURE_CUBE_MAP,a.TEXTURE_MIN_FILTER,a.NEAREST_MIPMAP_LINEAR);const d=function(r){(new Date).getTime()-f>500&&(window.userTriggered?(window.userTriggered=!1,clearInterval(c)):c=setInterval(()=>{if(window.userTriggered=!0,++l>90){const r=function(t){console.log(t.touches),t.clientX=t.touches[0].clientX,t.clientY=t.touches[0].clientY,o(t)},o=function(t){const r=t.clientX-e,o=t.clientY-n;e=t.clientX,n=t.clientY,u(a,{viewOrbitDelta:[r,o]})};"ontouchmove"in document.createElement("div")?(window.addEventListener("touchstart",(function(e){console.log("MouseDown"),r(e),t=!0,e.preventDefault()})),window.addEventListener("touchmove",(function(t){r(t),t.preventDefault()})),window.addEventListener("touchend",(function(e){console.log("MouseUp"),t=!1,e.preventDefault()})),console.log("touch is present")):(window.addEventListener("mousedown",(function(e){console.log("MouseDown"),o(e),t=!0,e.preventDefault()})),window.addEventListener("mousemove",o),window.addEventListener("mouseup",(function(e){console.log("MouseUp"),t=!1,e.preventDefault()}))),u(a,{worldCameraPosition:[.25,0,2.5]})}else++l>89?u(a,{buffers:[Mt,vt],cameraDelta:[.025,0,-.5],viewPosition:i.viewPoints[i.current].viewPosition,worldCameraPosition:[.25,0,2.5]}):u(a,{cameraDelta:[0,0,-.45],viewPosition:[0,0,5],worldCameraPosition:[0,0,2.5]})},33))};window.addEventListener("keydown",(function(t){const e=t||window.event;return 32===e.keyCode&&(d(),e.preventDefault(),!0)})),setTimeout((function(){d()}),533)}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,